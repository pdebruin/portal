<html><head><link rel=stylesheet href=style.css></head><body><div class=SourcePanel style='font-size:12'><pre style='background-color:white'>
<font color= "green">//------------------------------------------------------------------------------</font>
<font color= "green">// <autogenerated></font>
<font color= "green">//     This code was generated by a tool.</font>
<font color= "green">//     Runtime Version: 1.0.3705.209</font>
<font color= "green">//</font>
<font color= "green">//     Changes to this file may cause incorrect behavior and will be lost if </font>
<font color= "green">//     the code is regenerated.</font>
<font color= "green">// </autogenerated></font>
<font color= "green">//------------------------------------------------------------------------------</font>
<font color= "blue"></font>
<font color= "blue">namespace</font> ASPNET.StarterKit.Portal {
<font color= "blue">    using</font> System;
<font color= "blue">    using</font> System.Data;
<font color= "blue">    using</font> System.Xml;
<font color= "blue">    using</font> System.Runtime.Serialization;
<font color= "blue">    </font>
<font color= "blue">    </font>
<font color= "blue">    </font>[Serializable()]
<font color= "blue">    </font>[System.ComponentModel.DesignerCategoryAttribute("code")]
<font color= "blue">    </font>[System.Diagnostics.DebuggerStepThrough()]
<font color= "blue">    </font>[System.ComponentModel.ToolboxItem(true)]
<font color= "blue">    public class</font> SiteConfiguration : DataSet {
<font color= "blue">        </font>
<font color= "blue">        private </font>GlobalDataTable tableGlobal;
<font color= "blue">        </font>
<font color= "blue">        private </font>TabDataTable tableTab;
<font color= "blue">        </font>
<font color= "blue">        private </font>ModuleDataTable tableModule;
<font color= "blue">        </font>
<font color= "blue">        private </font>SettingsDataTable tableSettings;
<font color= "blue">        </font>
<font color= "blue">        private </font>SettingDataTable tableSetting;
<font color= "blue">        </font>
<font color= "blue">        private </font>ModuleDefinitionDataTable tableModuleDefinition;
<font color= "blue">        </font>
<font color= "blue">        private </font>DataRelation relationSettings_Setting;
<font color= "blue">        </font>
<font color= "blue">        private </font>DataRelation relationModule_Settings;
<font color= "blue">        </font>
<font color= "blue">        private </font>DataRelation relationTab_Module;
<font color= "blue">        </font>
<font color= "blue">        public </font>SiteConfiguration() {
<font color= "blue">            </font>this.InitClass();
<font color= "blue">            </font>System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
<font color= "blue">            </font>this.Tables.CollectionChanged += schemaChangedHandler;
<font color= "blue">            </font>this.Relations.CollectionChanged += schemaChangedHandler;
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        protected </font>SiteConfiguration(SerializationInfo info, StreamingContext context) {
<font color= "blue">            </font>string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
<font color= "blue"></font><font color= "blue">            if </font>((strSchema != null)) {<font color= "blue"></font>
<font color= "blue">                </font>DataSet ds = new DataSet();
<font color= "blue">                </font>ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
<font color= "blue"></font><font color= "blue">                if </font>((ds.Tables["Global"] != null)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.Tables.Add(new GlobalDataTable(ds.Tables["Global"]));
<font color= "blue">                </font>}
<font color= "blue"></font><font color= "blue">                if </font>((ds.Tables["Tab"] != null)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.Tables.Add(new TabDataTable(ds.Tables["Tab"]));
<font color= "blue">                </font>}
<font color= "blue"></font><font color= "blue">                if </font>((ds.Tables["Module"] != null)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.Tables.Add(new ModuleDataTable(ds.Tables["Module"]));
<font color= "blue">                </font>}
<font color= "blue"></font><font color= "blue">                if </font>((ds.Tables["Settings"] != null)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.Tables.Add(new SettingsDataTable(ds.Tables["Settings"]));
<font color= "blue">                </font>}
<font color= "blue"></font><font color= "blue">                if </font>((ds.Tables["Setting"] != null)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.Tables.Add(new SettingDataTable(ds.Tables["Setting"]));
<font color= "blue">                </font>}
<font color= "blue"></font><font color= "blue">                if </font>((ds.Tables["ModuleDefinition"] != null)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.Tables.Add(new ModuleDefinitionDataTable(ds.Tables["ModuleDefinition"]));
<font color= "blue">                </font>}
<font color= "blue">                </font>this.DataSetName = ds.DataSetName;
<font color= "blue">                </font>this.Prefix = ds.Prefix;
<font color= "blue">                </font>this.Namespace = ds.Namespace;
<font color= "blue">                </font>this.Locale = ds.Locale;
<font color= "blue">                </font>this.CaseSensitive = ds.CaseSensitive;
<font color= "blue">                </font>this.EnforceConstraints = ds.EnforceConstraints;
<font color= "blue">                </font>this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
<font color= "blue">                </font>this.InitVars();
<font color= "blue">            </font>}
<font color= "blue"></font><font color= "blue">            else </font>{<font color= "blue"></font>
<font color= "blue">                </font>this.InitClass();
<font color= "blue">            </font>}
<font color= "blue">            </font>this.GetSerializationData(info, context);
<font color= "blue">            </font>System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
<font color= "blue">            </font>this.Tables.CollectionChanged += schemaChangedHandler;
<font color= "blue">            </font>this.Relations.CollectionChanged += schemaChangedHandler;
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        </font>[System.ComponentModel.Browsable(false)]
<font color= "blue">        </font>[System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
<font color= "blue">        public </font>GlobalDataTable Global {
<font color= "blue">            get</font> {
<font color= "blue">                return</font> this.tableGlobal;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        </font>[System.ComponentModel.Browsable(false)]
<font color= "blue">        </font>[System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
<font color= "blue">        public </font>TabDataTable Tab {
<font color= "blue">            get</font> {
<font color= "blue">                return</font> this.tableTab;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        </font>[System.ComponentModel.Browsable(false)]
<font color= "blue">        </font>[System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
<font color= "blue">        public </font>ModuleDataTable Module {
<font color= "blue">            get</font> {
<font color= "blue">                return</font> this.tableModule;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        </font>[System.ComponentModel.Browsable(false)]
<font color= "blue">        </font>[System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
<font color= "blue">        public </font>SettingsDataTable Settings {
<font color= "blue">            get</font> {
<font color= "blue">                return</font> this.tableSettings;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        </font>[System.ComponentModel.Browsable(false)]
<font color= "blue">        </font>[System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
<font color= "blue">        public </font>SettingDataTable Setting {
<font color= "blue">            get</font> {
<font color= "blue">                return</font> this.tableSetting;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        </font>[System.ComponentModel.Browsable(false)]
<font color= "blue">        </font>[System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
<font color= "blue">        public </font>ModuleDefinitionDataTable ModuleDefinition {
<font color= "blue">            get</font> {
<font color= "blue">                return</font> this.tableModuleDefinition;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        public </font>override DataSet Clone() {
<font color= "blue">            </font>SiteConfiguration cln = ((SiteConfiguration)(base.Clone()));
<font color= "blue">            </font>cln.InitVars();
<font color= "blue">            return</font> cln;
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        protected </font>override bool ShouldSerializeTables() {
<font color= "blue">            return</font> false;
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        protected </font>override bool ShouldSerializeRelations() {
<font color= "blue">            return</font> false;
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        protected </font>override void ReadXmlSerializable(XmlReader reader) {
<font color= "blue">            </font>this.Reset();
<font color= "blue">            </font>DataSet ds = new DataSet();
<font color= "blue">            </font>ds.ReadXml(reader);
<font color= "blue"></font><font color= "blue">            if </font>((ds.Tables["Global"] != null)) {<font color= "blue"></font>
<font color= "blue">                </font>this.Tables.Add(new GlobalDataTable(ds.Tables["Global"]));
<font color= "blue">            </font>}
<font color= "blue"></font><font color= "blue">            if </font>((ds.Tables["Tab"] != null)) {<font color= "blue"></font>
<font color= "blue">                </font>this.Tables.Add(new TabDataTable(ds.Tables["Tab"]));
<font color= "blue">            </font>}
<font color= "blue"></font><font color= "blue">            if </font>((ds.Tables["Module"] != null)) {<font color= "blue"></font>
<font color= "blue">                </font>this.Tables.Add(new ModuleDataTable(ds.Tables["Module"]));
<font color= "blue">            </font>}
<font color= "blue"></font><font color= "blue">            if </font>((ds.Tables["Settings"] != null)) {<font color= "blue"></font>
<font color= "blue">                </font>this.Tables.Add(new SettingsDataTable(ds.Tables["Settings"]));
<font color= "blue">            </font>}
<font color= "blue"></font><font color= "blue">            if </font>((ds.Tables["Setting"] != null)) {<font color= "blue"></font>
<font color= "blue">                </font>this.Tables.Add(new SettingDataTable(ds.Tables["Setting"]));
<font color= "blue">            </font>}
<font color= "blue"></font><font color= "blue">            if </font>((ds.Tables["ModuleDefinition"] != null)) {<font color= "blue"></font>
<font color= "blue">                </font>this.Tables.Add(new ModuleDefinitionDataTable(ds.Tables["ModuleDefinition"]));
<font color= "blue">            </font>}
<font color= "blue">            </font>this.DataSetName = ds.DataSetName;
<font color= "blue">            </font>this.Prefix = ds.Prefix;
<font color= "blue">            </font>this.Namespace = ds.Namespace;
<font color= "blue">            </font>this.Locale = ds.Locale;
<font color= "blue">            </font>this.CaseSensitive = ds.CaseSensitive;
<font color= "blue">            </font>this.EnforceConstraints = ds.EnforceConstraints;
<font color= "blue">            </font>this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
<font color= "blue">            </font>this.InitVars();
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        protected </font>override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
<font color= "blue">            </font>System.IO.MemoryStream stream = new System.IO.MemoryStream();
<font color= "blue">            </font>this.WriteXmlSchema(new XmlTextWriter(stream, null));
<font color= "blue">            </font>stream.Position = 0;
<font color= "blue">            return</font> System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        </font>internal void InitVars() {
<font color= "blue">            </font>this.tableGlobal = ((GlobalDataTable)(this.Tables["Global"]));
<font color= "blue"></font><font color= "blue">            if </font>((this.tableGlobal != null)) {<font color= "blue"></font>
<font color= "blue">                </font>this.tableGlobal.InitVars();
<font color= "blue">            </font>}
<font color= "blue">            </font>this.tableTab = ((TabDataTable)(this.Tables["Tab"]));
<font color= "blue"></font><font color= "blue">            if </font>((this.tableTab != null)) {<font color= "blue"></font>
<font color= "blue">                </font>this.tableTab.InitVars();
<font color= "blue">            </font>}
<font color= "blue">            </font>this.tableModule = ((ModuleDataTable)(this.Tables["Module"]));
<font color= "blue"></font><font color= "blue">            if </font>((this.tableModule != null)) {<font color= "blue"></font>
<font color= "blue">                </font>this.tableModule.InitVars();
<font color= "blue">            </font>}
<font color= "blue">            </font>this.tableSettings = ((SettingsDataTable)(this.Tables["Settings"]));
<font color= "blue"></font><font color= "blue">            if </font>((this.tableSettings != null)) {<font color= "blue"></font>
<font color= "blue">                </font>this.tableSettings.InitVars();
<font color= "blue">            </font>}
<font color= "blue">            </font>this.tableSetting = ((SettingDataTable)(this.Tables["Setting"]));
<font color= "blue"></font><font color= "blue">            if </font>((this.tableSetting != null)) {<font color= "blue"></font>
<font color= "blue">                </font>this.tableSetting.InitVars();
<font color= "blue">            </font>}
<font color= "blue">            </font>this.tableModuleDefinition = ((ModuleDefinitionDataTable)(this.Tables["ModuleDefinition"]));
<font color= "blue"></font><font color= "blue">            if </font>((this.tableModuleDefinition != null)) {<font color= "blue"></font>
<font color= "blue">                </font>this.tableModuleDefinition.InitVars();
<font color= "blue">            </font>}
<font color= "blue">            </font>this.relationSettings_Setting = this.Relations["Settings_Setting"];
<font color= "blue">            </font>this.relationModule_Settings = this.Relations["Module_Settings"];
<font color= "blue">            </font>this.relationTab_Module = this.Relations["Tab_Module"];
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        private void</font> InitClass() {
<font color= "blue">            </font>this.DataSetName = "SiteConfiguration";
<font color= "blue">            </font>this.Prefix = "";
<font color= "blue">            </font>this.Namespace = "http://tempuri.org/PortalCfg.xsd";
<font color= "blue">            </font>this.Locale = new System.Globalization.CultureInfo("en-US");
<font color= "blue">            </font>this.CaseSensitive = false;
<font color= "blue">            </font>this.EnforceConstraints = false;
<font color= "blue">            </font>this.tableGlobal = new GlobalDataTable();
<font color= "blue">            </font>this.Tables.Add(this.tableGlobal);
<font color= "blue">            </font>this.tableTab = new TabDataTable();
<font color= "blue">            </font>this.Tables.Add(this.tableTab);
<font color= "blue">            </font>this.tableModule = new ModuleDataTable();
<font color= "blue">            </font>this.Tables.Add(this.tableModule);
<font color= "blue">            </font>this.tableSettings = new SettingsDataTable();
<font color= "blue">            </font>this.Tables.Add(this.tableSettings);
<font color= "blue">            </font>this.tableSetting = new SettingDataTable();
<font color= "blue">            </font>this.Tables.Add(this.tableSetting);
<font color= "blue">            </font>this.tableModuleDefinition = new ModuleDefinitionDataTable();
<font color= "blue">            </font>this.Tables.Add(this.tableModuleDefinition);
<font color= "blue">            </font>ForeignKeyConstraint fkc;
<font color= "blue">            </font>fkc = new ForeignKeyConstraint("Tab_Module", new DataColumn[] {
<font color= "blue">                        </font>this.tableTab.TabIdColumn}, new DataColumn[] {
<font color= "blue">                        </font>this.tableModule.TabIdColumn});
<font color= "blue">            </font>this.tableModule.Constraints.Add(fkc);
<font color= "blue">            </font>fkc.AcceptRejectRule = AcceptRejectRule.None;
<font color= "blue">            </font>fkc.DeleteRule = Rule.Cascade;
<font color= "blue">            </font>fkc.UpdateRule = Rule.Cascade;
<font color= "blue">            </font>fkc = new ForeignKeyConstraint("Module_Settings", new DataColumn[] {
<font color= "blue">                        </font>this.tableModule.ModuleIdColumn}, new DataColumn[] {
<font color= "blue">                        </font>this.tableSettings.ModuleIdColumn});
<font color= "blue">            </font>this.tableSettings.Constraints.Add(fkc);
<font color= "blue">            </font>fkc.AcceptRejectRule = AcceptRejectRule.None;
<font color= "blue">            </font>fkc.DeleteRule = Rule.Cascade;
<font color= "blue">            </font>fkc.UpdateRule = Rule.Cascade;
<font color= "blue">            </font>fkc = new ForeignKeyConstraint("Settings_Setting", new DataColumn[] {
<font color= "blue">                        </font>this.tableSettings.Settings_IdColumn}, new DataColumn[] {
<font color= "blue">                        </font>this.tableSetting.Settings_IdColumn});
<font color= "blue">            </font>this.tableSetting.Constraints.Add(fkc);
<font color= "blue">            </font>fkc.AcceptRejectRule = AcceptRejectRule.None;
<font color= "blue">            </font>fkc.DeleteRule = Rule.Cascade;
<font color= "blue">            </font>fkc.UpdateRule = Rule.Cascade;
<font color= "blue">            </font>this.relationSettings_Setting = new DataRelation("Settings_Setting", new DataColumn[] {
<font color= "blue">                        </font>this.tableSettings.Settings_IdColumn}, new DataColumn[] {
<font color= "blue">                        </font>this.tableSetting.Settings_IdColumn}, false);
<font color= "blue">            </font>this.relationSettings_Setting.Nested = true;
<font color= "blue">            </font>this.Relations.Add(this.relationSettings_Setting);
<font color= "blue">            </font>this.relationModule_Settings = new DataRelation("Module_Settings", new DataColumn[] {
<font color= "blue">                        </font>this.tableModule.ModuleIdColumn}, new DataColumn[] {
<font color= "blue">                        </font>this.tableSettings.ModuleIdColumn}, false);
<font color= "blue">            </font>this.relationModule_Settings.Nested = true;
<font color= "blue">            </font>this.Relations.Add(this.relationModule_Settings);
<font color= "blue">            </font>this.relationTab_Module = new DataRelation("Tab_Module", new DataColumn[] {
<font color= "blue">                        </font>this.tableTab.TabIdColumn}, new DataColumn[] {
<font color= "blue">                        </font>this.tableModule.TabIdColumn}, false);
<font color= "blue">            </font>this.relationTab_Module.Nested = true;
<font color= "blue">            </font>this.Relations.Add(this.relationTab_Module);
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        private </font>bool ShouldSerializeGlobal() {
<font color= "blue">            return</font> false;
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        private </font>bool ShouldSerializeTab() {
<font color= "blue">            return</font> false;
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        private </font>bool ShouldSerializeModule() {
<font color= "blue">            return</font> false;
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        private </font>bool ShouldSerializeSettings() {
<font color= "blue">            return</font> false;
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        private </font>bool ShouldSerializeSetting() {
<font color= "blue">            return</font> false;
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        private </font>bool ShouldSerializeModuleDefinition() {
<font color= "blue">            return</font> false;
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        private void</font> SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
<font color= "blue"></font><font color= "blue">            if </font>((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {<font color= "blue"></font>
<font color= "blue">                </font>this.InitVars();
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        public </font>delegate void GlobalRowChangeEventHandler(object sender, GlobalRowChangeEvent e);
<font color= "blue">        </font>
<font color= "blue">        public </font>delegate void TabRowChangeEventHandler(object sender, TabRowChangeEvent e);
<font color= "blue">        </font>
<font color= "blue">        public </font>delegate void ModuleRowChangeEventHandler(object sender, ModuleRowChangeEvent e);
<font color= "blue">        </font>
<font color= "blue">        public </font>delegate void SettingsRowChangeEventHandler(object sender, SettingsRowChangeEvent e);
<font color= "blue">        </font>
<font color= "blue">        public </font>delegate void SettingRowChangeEventHandler(object sender, SettingRowChangeEvent e);
<font color= "blue">        </font>
<font color= "blue">        public </font>delegate void ModuleDefinitionRowChangeEventHandler(object sender, ModuleDefinitionRowChangeEvent e);
<font color= "blue">        </font>
<font color= "blue">        </font>[System.Diagnostics.DebuggerStepThrough()]
<font color= "blue">        public class</font> GlobalDataTable : DataTable, System.Collections.IEnumerable {
<font color= "blue">            </font>
<font color= "blue">            private </font>DataColumn columnPortalId;
<font color= "blue">            </font>
<font color= "blue">            private </font>DataColumn columnPortalName;
<font color= "blue">            </font>
<font color= "blue">            private </font>DataColumn columnAlwaysShowEditButton;
<font color= "blue">            </font>
<font color= "blue">            </font>internal GlobalDataTable() : 
<font color= "blue">                    </font>base("Global") {
<font color= "blue">                </font>this.InitClass();
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal GlobalDataTable(DataTable table) : 
<font color= "blue">                    </font>base(table.TableName) {
<font color= "blue"></font><font color= "blue">                if </font>((table.CaseSensitive != table.DataSet.CaseSensitive)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.CaseSensitive = table.CaseSensitive;
<font color= "blue">                </font>}
<font color= "blue"></font><font color= "blue">                if </font>((table.Locale.ToString() != table.DataSet.Locale.ToString())) {<font color= "blue"></font>
<font color= "blue">                    </font>this.Locale = table.Locale;
<font color= "blue">                </font>}
<font color= "blue"></font><font color= "blue">                if </font>((table.Namespace != table.DataSet.Namespace)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.Namespace = table.Namespace;
<font color= "blue">                </font>}
<font color= "blue">                </font>this.Prefix = table.Prefix;
<font color= "blue">                </font>this.MinimumCapacity = table.MinimumCapacity;
<font color= "blue">                </font>this.DisplayExpression = table.DisplayExpression;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>[System.ComponentModel.Browsable(false)]
<font color= "blue">            public </font>int Count {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.Rows.Count;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal DataColumn PortalIdColumn {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.columnPortalId;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal DataColumn PortalNameColumn {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.columnPortalName;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal DataColumn AlwaysShowEditButtonColumn {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.columnAlwaysShowEditButton;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>GlobalRow this[int index] {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> ((GlobalRow)(this.Rows[index]));
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>event GlobalRowChangeEventHandler GlobalRowChanged;
<font color= "blue">            </font>
<font color= "blue">            public </font>event GlobalRowChangeEventHandler GlobalRowChanging;
<font color= "blue">            </font>
<font color= "blue">            public </font>event GlobalRowChangeEventHandler GlobalRowDeleted;
<font color= "blue">            </font>
<font color= "blue">            public </font>event GlobalRowChangeEventHandler GlobalRowDeleting;
<font color= "blue">            </font>
<font color= "blue">            public void</font> AddGlobalRow(GlobalRow row) {
<font color= "blue">                </font>this.Rows.Add(row);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>GlobalRow AddGlobalRow(int PortalId, string PortalName, bool AlwaysShowEditButton) {
<font color= "blue">                </font>GlobalRow rowGlobalRow = ((GlobalRow)(this.NewRow()));
<font color= "blue">                </font>rowGlobalRow.ItemArray = new object[] {
<font color= "blue">                        </font>PortalId,
<font color= "blue">                        </font>PortalName,
<font color= "blue">                        </font>AlwaysShowEditButton};
<font color= "blue">                </font>this.Rows.Add(rowGlobalRow);
<font color= "blue">                return</font> rowGlobalRow;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>GlobalRow FindByPortalId(int PortalId) {
<font color= "blue">                return</font> ((GlobalRow)(this.Rows.Find(new object[] {
<font color= "blue">                            </font>PortalId})));
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>System.Collections.IEnumerator GetEnumerator() {
<font color= "blue">                return</font> this.Rows.GetEnumerator();
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>override DataTable Clone() {
<font color= "blue">                </font>GlobalDataTable cln = ((GlobalDataTable)(base.Clone()));
<font color= "blue">                </font>cln.InitVars();
<font color= "blue">                return</font> cln;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override DataTable CreateInstance() {
<font color= "blue">                return</font> new GlobalDataTable();
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal void InitVars() {
<font color= "blue">                </font>this.columnPortalId = this.Columns["PortalId"];
<font color= "blue">                </font>this.columnPortalName = this.Columns["PortalName"];
<font color= "blue">                </font>this.columnAlwaysShowEditButton = this.Columns["AlwaysShowEditButton"];
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            private void</font> InitClass() {
<font color= "blue">                </font>this.columnPortalId = new DataColumn("PortalId", typeof(int), null, System.Data.MappingType.Attribute);
<font color= "blue">                </font>this.Columns.Add(this.columnPortalId);
<font color= "blue">                </font>this.columnPortalName = new DataColumn("PortalName", typeof(string), null, System.Data.MappingType.Attribute);
<font color= "blue">                </font>this.Columns.Add(this.columnPortalName);
<font color= "blue">                </font>this.columnAlwaysShowEditButton = new DataColumn("AlwaysShowEditButton", typeof(bool), null, System.Data.MappingType.Attribute);
<font color= "blue">                </font>this.Columns.Add(this.columnAlwaysShowEditButton);
<font color= "blue">                </font>this.Constraints.Add(new UniqueConstraint("GlobalKey", new DataColumn[] {
<font color= "blue">                                </font>this.columnPortalId}, true));
<font color= "blue">                </font>this.columnPortalId.AllowDBNull = false;
<font color= "blue">                </font>this.columnPortalId.Unique = true;
<font color= "blue">                </font>this.columnPortalId.Namespace = "";
<font color= "blue">                </font>this.columnPortalName.Namespace = "";
<font color= "blue">                </font>this.columnAlwaysShowEditButton.Namespace = "";
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>GlobalRow NewGlobalRow() {
<font color= "blue">                return</font> ((GlobalRow)(this.NewRow()));
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override DataRow NewRowFromBuilder(DataRowBuilder builder) {
<font color= "blue">                return</font> new GlobalRow(builder);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override System.Type GetRowType() {
<font color= "blue">                return</font> typeof(GlobalRow);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override void OnRowChanged(DataRowChangeEventArgs e) {
<font color= "blue">                </font>base.OnRowChanged(e);
<font color= "blue"></font><font color= "blue">                if </font>((this.GlobalRowChanged != null)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.GlobalRowChanged(this, new GlobalRowChangeEvent(((GlobalRow)(e.Row)), e.Action));
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override void OnRowChanging(DataRowChangeEventArgs e) {
<font color= "blue">                </font>base.OnRowChanging(e);
<font color= "blue"></font><font color= "blue">                if </font>((this.GlobalRowChanging != null)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.GlobalRowChanging(this, new GlobalRowChangeEvent(((GlobalRow)(e.Row)), e.Action));
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override void OnRowDeleted(DataRowChangeEventArgs e) {
<font color= "blue">                </font>base.OnRowDeleted(e);
<font color= "blue"></font><font color= "blue">                if </font>((this.GlobalRowDeleted != null)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.GlobalRowDeleted(this, new GlobalRowChangeEvent(((GlobalRow)(e.Row)), e.Action));
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override void OnRowDeleting(DataRowChangeEventArgs e) {
<font color= "blue">                </font>base.OnRowDeleting(e);
<font color= "blue"></font><font color= "blue">                if </font>((this.GlobalRowDeleting != null)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.GlobalRowDeleting(this, new GlobalRowChangeEvent(((GlobalRow)(e.Row)), e.Action));
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public void</font> RemoveGlobalRow(GlobalRow row) {
<font color= "blue">                </font>this.Rows.Remove(row);
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        </font>[System.Diagnostics.DebuggerStepThrough()]
<font color= "blue">        public class</font> GlobalRow : DataRow {
<font color= "blue">            </font>
<font color= "blue">            private </font>GlobalDataTable tableGlobal;
<font color= "blue">            </font>
<font color= "blue">            </font>internal GlobalRow(DataRowBuilder rb) : 
<font color= "blue">                    </font>base(rb) {
<font color= "blue">                </font>this.tableGlobal = ((GlobalDataTable)(this.Table));
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>int PortalId {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> ((int)(this[this.tableGlobal.PortalIdColumn]));
<font color= "blue">                </font>}
<font color= "blue">                set</font> {
<font color= "blue">                    </font>this[this.tableGlobal.PortalIdColumn] = value;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>string PortalName {
<font color= "blue">                get</font> {
<font color= "blue">                    try</font> {
<font color= "blue">                        return</font> ((string)(this[this.tableGlobal.PortalNameColumn]));
<font color= "blue">                    </font>}
<font color= "blue">                    catch</font> (InvalidCastException e) {
<font color= "blue">                        </font>throw new StrongTypingException("Cannot get value because it is DBNull.", e);
<font color= "blue">                    </font>}
<font color= "blue">                </font>}
<font color= "blue">                set</font> {
<font color= "blue">                    </font>this[this.tableGlobal.PortalNameColumn] = value;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>bool AlwaysShowEditButton {
<font color= "blue">                get</font> {
<font color= "blue">                    try</font> {
<font color= "blue">                        return</font> ((bool)(this[this.tableGlobal.AlwaysShowEditButtonColumn]));
<font color= "blue">                    </font>}
<font color= "blue">                    catch</font> (InvalidCastException e) {
<font color= "blue">                        </font>throw new StrongTypingException("Cannot get value because it is DBNull.", e);
<font color= "blue">                    </font>}
<font color= "blue">                </font>}
<font color= "blue">                set</font> {
<font color= "blue">                    </font>this[this.tableGlobal.AlwaysShowEditButtonColumn] = value;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>bool IsPortalNameNull() {
<font color= "blue">                return</font> this.IsNull(this.tableGlobal.PortalNameColumn);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public void</font> SetPortalNameNull() {
<font color= "blue">                </font>this[this.tableGlobal.PortalNameColumn] = System.Convert.DBNull;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>bool IsAlwaysShowEditButtonNull() {
<font color= "blue">                return</font> this.IsNull(this.tableGlobal.AlwaysShowEditButtonColumn);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public void</font> SetAlwaysShowEditButtonNull() {
<font color= "blue">                </font>this[this.tableGlobal.AlwaysShowEditButtonColumn] = System.Convert.DBNull;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        </font>[System.Diagnostics.DebuggerStepThrough()]
<font color= "blue">        public class</font> GlobalRowChangeEvent : EventArgs {
<font color= "blue">            </font>
<font color= "blue">            private </font>GlobalRow eventRow;
<font color= "blue">            </font>
<font color= "blue">            private </font>DataRowAction eventAction;
<font color= "blue">            </font>
<font color= "blue">            public </font>GlobalRowChangeEvent(GlobalRow row, DataRowAction action) {
<font color= "blue">                </font>this.eventRow = row;
<font color= "blue">                </font>this.eventAction = action;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>GlobalRow Row {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.eventRow;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>DataRowAction Action {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.eventAction;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        </font>[System.Diagnostics.DebuggerStepThrough()]
<font color= "blue">        public class</font> TabDataTable : DataTable, System.Collections.IEnumerable {
<font color= "blue">            </font>
<font color= "blue">            private </font>DataColumn columnTabId;
<font color= "blue">            </font>
<font color= "blue">            private </font>DataColumn columnTabName;
<font color= "blue">            </font>
<font color= "blue">            private </font>DataColumn columnAccessRoles;
<font color= "blue">            </font>
<font color= "blue">            private </font>DataColumn columnTabOrder;
<font color= "blue">            </font>
<font color= "blue">            private </font>DataColumn columnShowMobile;
<font color= "blue">            </font>
<font color= "blue">            private </font>DataColumn columnMobileTabName;
<font color= "blue">            </font>
<font color= "blue">            </font>internal TabDataTable() : 
<font color= "blue">                    </font>base("Tab") {
<font color= "blue">                </font>this.InitClass();
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal TabDataTable(DataTable table) : 
<font color= "blue">                    </font>base(table.TableName) {
<font color= "blue"></font><font color= "blue">                if </font>((table.CaseSensitive != table.DataSet.CaseSensitive)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.CaseSensitive = table.CaseSensitive;
<font color= "blue">                </font>}
<font color= "blue"></font><font color= "blue">                if </font>((table.Locale.ToString() != table.DataSet.Locale.ToString())) {<font color= "blue"></font>
<font color= "blue">                    </font>this.Locale = table.Locale;
<font color= "blue">                </font>}
<font color= "blue"></font><font color= "blue">                if </font>((table.Namespace != table.DataSet.Namespace)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.Namespace = table.Namespace;
<font color= "blue">                </font>}
<font color= "blue">                </font>this.Prefix = table.Prefix;
<font color= "blue">                </font>this.MinimumCapacity = table.MinimumCapacity;
<font color= "blue">                </font>this.DisplayExpression = table.DisplayExpression;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>[System.ComponentModel.Browsable(false)]
<font color= "blue">            public </font>int Count {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.Rows.Count;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal DataColumn TabIdColumn {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.columnTabId;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal DataColumn TabNameColumn {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.columnTabName;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal DataColumn AccessRolesColumn {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.columnAccessRoles;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal DataColumn TabOrderColumn {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.columnTabOrder;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal DataColumn ShowMobileColumn {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.columnShowMobile;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal DataColumn MobileTabNameColumn {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.columnMobileTabName;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>TabRow this[int index] {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> ((TabRow)(this.Rows[index]));
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>event TabRowChangeEventHandler TabRowChanged;
<font color= "blue">            </font>
<font color= "blue">            public </font>event TabRowChangeEventHandler TabRowChanging;
<font color= "blue">            </font>
<font color= "blue">            public </font>event TabRowChangeEventHandler TabRowDeleted;
<font color= "blue">            </font>
<font color= "blue">            public </font>event TabRowChangeEventHandler TabRowDeleting;
<font color= "blue">            </font>
<font color= "blue">            public void</font> AddTabRow(TabRow row) {
<font color= "blue">                </font>this.Rows.Add(row);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>TabRow AddTabRow(int TabId, string TabName, string AccessRoles, int TabOrder, bool ShowMobile, string MobileTabName) {
<font color= "blue">                </font>TabRow rowTabRow = ((TabRow)(this.NewRow()));
<font color= "blue">                </font>rowTabRow.ItemArray = new object[] {
<font color= "blue">                        </font>TabId,
<font color= "blue">                        </font>TabName,
<font color= "blue">                        </font>AccessRoles,
<font color= "blue">                        </font>TabOrder,
<font color= "blue">                        </font>ShowMobile,
<font color= "blue">                        </font>MobileTabName};
<font color= "blue">                </font>this.Rows.Add(rowTabRow);
<font color= "blue">                return</font> rowTabRow;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>TabRow FindByTabId(int TabId) {
<font color= "blue">                return</font> ((TabRow)(this.Rows.Find(new object[] {
<font color= "blue">                            </font>TabId})));
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>System.Collections.IEnumerator GetEnumerator() {
<font color= "blue">                return</font> this.Rows.GetEnumerator();
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>override DataTable Clone() {
<font color= "blue">                </font>TabDataTable cln = ((TabDataTable)(base.Clone()));
<font color= "blue">                </font>cln.InitVars();
<font color= "blue">                return</font> cln;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override DataTable CreateInstance() {
<font color= "blue">                return</font> new TabDataTable();
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal void InitVars() {
<font color= "blue">                </font>this.columnTabId = this.Columns["TabId"];
<font color= "blue">                </font>this.columnTabName = this.Columns["TabName"];
<font color= "blue">                </font>this.columnAccessRoles = this.Columns["AccessRoles"];
<font color= "blue">                </font>this.columnTabOrder = this.Columns["TabOrder"];
<font color= "blue">                </font>this.columnShowMobile = this.Columns["ShowMobile"];
<font color= "blue">                </font>this.columnMobileTabName = this.Columns["MobileTabName"];
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            private void</font> InitClass() {
<font color= "blue">                </font>this.columnTabId = new DataColumn("TabId", typeof(int), null, System.Data.MappingType.Attribute);
<font color= "blue">                </font>this.Columns.Add(this.columnTabId);
<font color= "blue">                </font>this.columnTabName = new DataColumn("TabName", typeof(string), null, System.Data.MappingType.Attribute);
<font color= "blue">                </font>this.Columns.Add(this.columnTabName);
<font color= "blue">                </font>this.columnAccessRoles = new DataColumn("AccessRoles", typeof(string), null, System.Data.MappingType.Attribute);
<font color= "blue">                </font>this.Columns.Add(this.columnAccessRoles);
<font color= "blue">                </font>this.columnTabOrder = new DataColumn("TabOrder", typeof(int), null, System.Data.MappingType.Attribute);
<font color= "blue">                </font>this.Columns.Add(this.columnTabOrder);
<font color= "blue">                </font>this.columnShowMobile = new DataColumn("ShowMobile", typeof(bool), null, System.Data.MappingType.Attribute);
<font color= "blue">                </font>this.Columns.Add(this.columnShowMobile);
<font color= "blue">                </font>this.columnMobileTabName = new DataColumn("MobileTabName", typeof(string), null, System.Data.MappingType.Attribute);
<font color= "blue">                </font>this.Columns.Add(this.columnMobileTabName);
<font color= "blue">                </font>this.Constraints.Add(new UniqueConstraint("TabKey", new DataColumn[] {
<font color= "blue">                                </font>this.columnTabId}, true));
<font color= "blue">                </font>this.columnTabId.AllowDBNull = false;
<font color= "blue">                </font>this.columnTabId.Unique = true;
<font color= "blue">                </font>this.columnTabId.Namespace = "";
<font color= "blue">                </font>this.columnTabName.Namespace = "";
<font color= "blue">                </font>this.columnAccessRoles.Namespace = "";
<font color= "blue">                </font>this.columnTabOrder.Namespace = "";
<font color= "blue">                </font>this.columnShowMobile.Namespace = "";
<font color= "blue">                </font>this.columnMobileTabName.Namespace = "";
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>TabRow NewTabRow() {
<font color= "blue">                return</font> ((TabRow)(this.NewRow()));
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override DataRow NewRowFromBuilder(DataRowBuilder builder) {
<font color= "blue">                return</font> new TabRow(builder);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override System.Type GetRowType() {
<font color= "blue">                return</font> typeof(TabRow);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override void OnRowChanged(DataRowChangeEventArgs e) {
<font color= "blue">                </font>base.OnRowChanged(e);
<font color= "blue"></font><font color= "blue">                if </font>((this.TabRowChanged != null)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.TabRowChanged(this, new TabRowChangeEvent(((TabRow)(e.Row)), e.Action));
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override void OnRowChanging(DataRowChangeEventArgs e) {
<font color= "blue">                </font>base.OnRowChanging(e);
<font color= "blue"></font><font color= "blue">                if </font>((this.TabRowChanging != null)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.TabRowChanging(this, new TabRowChangeEvent(((TabRow)(e.Row)), e.Action));
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override void OnRowDeleted(DataRowChangeEventArgs e) {
<font color= "blue">                </font>base.OnRowDeleted(e);
<font color= "blue"></font><font color= "blue">                if </font>((this.TabRowDeleted != null)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.TabRowDeleted(this, new TabRowChangeEvent(((TabRow)(e.Row)), e.Action));
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override void OnRowDeleting(DataRowChangeEventArgs e) {
<font color= "blue">                </font>base.OnRowDeleting(e);
<font color= "blue"></font><font color= "blue">                if </font>((this.TabRowDeleting != null)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.TabRowDeleting(this, new TabRowChangeEvent(((TabRow)(e.Row)), e.Action));
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public void</font> RemoveTabRow(TabRow row) {
<font color= "blue">                </font>this.Rows.Remove(row);
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        </font>[System.Diagnostics.DebuggerStepThrough()]
<font color= "blue">        public class</font> TabRow : DataRow {
<font color= "blue">            </font>
<font color= "blue">            private </font>TabDataTable tableTab;
<font color= "blue">            </font>
<font color= "blue">            </font>internal TabRow(DataRowBuilder rb) : 
<font color= "blue">                    </font>base(rb) {
<font color= "blue">                </font>this.tableTab = ((TabDataTable)(this.Table));
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>int TabId {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> ((int)(this[this.tableTab.TabIdColumn]));
<font color= "blue">                </font>}
<font color= "blue">                set</font> {
<font color= "blue">                    </font>this[this.tableTab.TabIdColumn] = value;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>string TabName {
<font color= "blue">                get</font> {
<font color= "blue">                    try</font> {
<font color= "blue">                        return</font> ((string)(this[this.tableTab.TabNameColumn]));
<font color= "blue">                    </font>}
<font color= "blue">                    catch</font> (InvalidCastException e) {
<font color= "blue">                        </font>throw new StrongTypingException("Cannot get value because it is DBNull.", e);
<font color= "blue">                    </font>}
<font color= "blue">                </font>}
<font color= "blue">                set</font> {
<font color= "blue">                    </font>this[this.tableTab.TabNameColumn] = value;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>string AccessRoles {
<font color= "blue">                get</font> {
<font color= "blue">                    try</font> {
<font color= "blue">                        return</font> ((string)(this[this.tableTab.AccessRolesColumn]));
<font color= "blue">                    </font>}
<font color= "blue">                    catch</font> (InvalidCastException e) {
<font color= "blue">                        </font>throw new StrongTypingException("Cannot get value because it is DBNull.", e);
<font color= "blue">                    </font>}
<font color= "blue">                </font>}
<font color= "blue">                set</font> {
<font color= "blue">                    </font>this[this.tableTab.AccessRolesColumn] = value;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>int TabOrder {
<font color= "blue">                get</font> {
<font color= "blue">                    try</font> {
<font color= "blue">                        return</font> ((int)(this[this.tableTab.TabOrderColumn]));
<font color= "blue">                    </font>}
<font color= "blue">                    catch</font> (InvalidCastException e) {
<font color= "blue">                        </font>throw new StrongTypingException("Cannot get value because it is DBNull.", e);
<font color= "blue">                    </font>}
<font color= "blue">                </font>}
<font color= "blue">                set</font> {
<font color= "blue">                    </font>this[this.tableTab.TabOrderColumn] = value;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>bool ShowMobile {
<font color= "blue">                get</font> {
<font color= "blue">                    try</font> {
<font color= "blue">                        return</font> ((bool)(this[this.tableTab.ShowMobileColumn]));
<font color= "blue">                    </font>}
<font color= "blue">                    catch</font> (InvalidCastException e) {
<font color= "blue">                        </font>throw new StrongTypingException("Cannot get value because it is DBNull.", e);
<font color= "blue">                    </font>}
<font color= "blue">                </font>}
<font color= "blue">                set</font> {
<font color= "blue">                    </font>this[this.tableTab.ShowMobileColumn] = value;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>string MobileTabName {
<font color= "blue">                get</font> {
<font color= "blue">                    try</font> {
<font color= "blue">                        return</font> ((string)(this[this.tableTab.MobileTabNameColumn]));
<font color= "blue">                    </font>}
<font color= "blue">                    catch</font> (InvalidCastException e) {
<font color= "blue">                        </font>throw new StrongTypingException("Cannot get value because it is DBNull.", e);
<font color= "blue">                    </font>}
<font color= "blue">                </font>}
<font color= "blue">                set</font> {
<font color= "blue">                    </font>this[this.tableTab.MobileTabNameColumn] = value;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>bool IsTabNameNull() {
<font color= "blue">                return</font> this.IsNull(this.tableTab.TabNameColumn);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public void</font> SetTabNameNull() {
<font color= "blue">                </font>this[this.tableTab.TabNameColumn] = System.Convert.DBNull;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>bool IsAccessRolesNull() {
<font color= "blue">                return</font> this.IsNull(this.tableTab.AccessRolesColumn);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public void</font> SetAccessRolesNull() {
<font color= "blue">                </font>this[this.tableTab.AccessRolesColumn] = System.Convert.DBNull;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>bool IsTabOrderNull() {
<font color= "blue">                return</font> this.IsNull(this.tableTab.TabOrderColumn);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public void</font> SetTabOrderNull() {
<font color= "blue">                </font>this[this.tableTab.TabOrderColumn] = System.Convert.DBNull;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>bool IsShowMobileNull() {
<font color= "blue">                return</font> this.IsNull(this.tableTab.ShowMobileColumn);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public void</font> SetShowMobileNull() {
<font color= "blue">                </font>this[this.tableTab.ShowMobileColumn] = System.Convert.DBNull;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>bool IsMobileTabNameNull() {
<font color= "blue">                return</font> this.IsNull(this.tableTab.MobileTabNameColumn);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public void</font> SetMobileTabNameNull() {
<font color= "blue">                </font>this[this.tableTab.MobileTabNameColumn] = System.Convert.DBNull;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>ModuleRow[] GetModuleRows() {
<font color= "blue">                return</font> ((ModuleRow[])(this.GetChildRows(this.Table.ChildRelations["Tab_Module"])));
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        </font>[System.Diagnostics.DebuggerStepThrough()]
<font color= "blue">        public class</font> TabRowChangeEvent : EventArgs {
<font color= "blue">            </font>
<font color= "blue">            private </font>TabRow eventRow;
<font color= "blue">            </font>
<font color= "blue">            private </font>DataRowAction eventAction;
<font color= "blue">            </font>
<font color= "blue">            public </font>TabRowChangeEvent(TabRow row, DataRowAction action) {
<font color= "blue">                </font>this.eventRow = row;
<font color= "blue">                </font>this.eventAction = action;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>TabRow Row {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.eventRow;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>DataRowAction Action {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.eventAction;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        </font>[System.Diagnostics.DebuggerStepThrough()]
<font color= "blue">        public class</font> ModuleDataTable : DataTable, System.Collections.IEnumerable {
<font color= "blue">            </font>
<font color= "blue">            private </font>DataColumn columnModuleId;
<font color= "blue">            </font>
<font color= "blue">            private </font>DataColumn columnModuleTitle;
<font color= "blue">            </font>
<font color= "blue">            private </font>DataColumn columnEditRoles;
<font color= "blue">            </font>
<font color= "blue">            private </font>DataColumn columnModuleDefId;
<font color= "blue">            </font>
<font color= "blue">            private </font>DataColumn columnPaneName;
<font color= "blue">            </font>
<font color= "blue">            private </font>DataColumn columnCacheTimeout;
<font color= "blue">            </font>
<font color= "blue">            private </font>DataColumn columnModuleOrder;
<font color= "blue">            </font>
<font color= "blue">            private </font>DataColumn columnShowMobile;
<font color= "blue">            </font>
<font color= "blue">            private </font>DataColumn columnTabId;
<font color= "blue">            </font>
<font color= "blue">            </font>internal ModuleDataTable() : 
<font color= "blue">                    </font>base("Module") {
<font color= "blue">                </font>this.InitClass();
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal ModuleDataTable(DataTable table) : 
<font color= "blue">                    </font>base(table.TableName) {
<font color= "blue"></font><font color= "blue">                if </font>((table.CaseSensitive != table.DataSet.CaseSensitive)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.CaseSensitive = table.CaseSensitive;
<font color= "blue">                </font>}
<font color= "blue"></font><font color= "blue">                if </font>((table.Locale.ToString() != table.DataSet.Locale.ToString())) {<font color= "blue"></font>
<font color= "blue">                    </font>this.Locale = table.Locale;
<font color= "blue">                </font>}
<font color= "blue"></font><font color= "blue">                if </font>((table.Namespace != table.DataSet.Namespace)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.Namespace = table.Namespace;
<font color= "blue">                </font>}
<font color= "blue">                </font>this.Prefix = table.Prefix;
<font color= "blue">                </font>this.MinimumCapacity = table.MinimumCapacity;
<font color= "blue">                </font>this.DisplayExpression = table.DisplayExpression;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>[System.ComponentModel.Browsable(false)]
<font color= "blue">            public </font>int Count {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.Rows.Count;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal DataColumn ModuleIdColumn {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.columnModuleId;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal DataColumn ModuleTitleColumn {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.columnModuleTitle;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal DataColumn EditRolesColumn {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.columnEditRoles;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal DataColumn ModuleDefIdColumn {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.columnModuleDefId;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal DataColumn PaneNameColumn {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.columnPaneName;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal DataColumn CacheTimeoutColumn {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.columnCacheTimeout;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal DataColumn ModuleOrderColumn {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.columnModuleOrder;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal DataColumn ShowMobileColumn {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.columnShowMobile;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal DataColumn TabIdColumn {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.columnTabId;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>ModuleRow this[int index] {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> ((ModuleRow)(this.Rows[index]));
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>event ModuleRowChangeEventHandler ModuleRowChanged;
<font color= "blue">            </font>
<font color= "blue">            public </font>event ModuleRowChangeEventHandler ModuleRowChanging;
<font color= "blue">            </font>
<font color= "blue">            public </font>event ModuleRowChangeEventHandler ModuleRowDeleted;
<font color= "blue">            </font>
<font color= "blue">            public </font>event ModuleRowChangeEventHandler ModuleRowDeleting;
<font color= "blue">            </font>
<font color= "blue">            public void</font> AddModuleRow(ModuleRow row) {
<font color= "blue">                </font>this.Rows.Add(row);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>ModuleRow AddModuleRow(int ModuleId, string ModuleTitle, string EditRoles, int ModuleDefId, string PaneName, int CacheTimeout, int ModuleOrder, bool ShowMobile, TabRow parentTabRowByTab_Module) {
<font color= "blue">                </font>ModuleRow rowModuleRow = ((ModuleRow)(this.NewRow()));
<font color= "blue">                </font>rowModuleRow.ItemArray = new object[] {
<font color= "blue">                        </font>ModuleId,
<font color= "blue">                        </font>ModuleTitle,
<font color= "blue">                        </font>EditRoles,
<font color= "blue">                        </font>ModuleDefId,
<font color= "blue">                        </font>PaneName,
<font color= "blue">                        </font>CacheTimeout,
<font color= "blue">                        </font>ModuleOrder,
<font color= "blue">                        </font>ShowMobile,
<font color= "blue">                        </font>parentTabRowByTab_Module[0]};
<font color= "blue">                </font>this.Rows.Add(rowModuleRow);
<font color= "blue">                return</font> rowModuleRow;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>ModuleRow FindByModuleId(int ModuleId) {
<font color= "blue">                return</font> ((ModuleRow)(this.Rows.Find(new object[] {
<font color= "blue">                            </font>ModuleId})));
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>System.Collections.IEnumerator GetEnumerator() {
<font color= "blue">                return</font> this.Rows.GetEnumerator();
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>override DataTable Clone() {
<font color= "blue">                </font>ModuleDataTable cln = ((ModuleDataTable)(base.Clone()));
<font color= "blue">                </font>cln.InitVars();
<font color= "blue">                return</font> cln;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override DataTable CreateInstance() {
<font color= "blue">                return</font> new ModuleDataTable();
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal void InitVars() {
<font color= "blue">                </font>this.columnModuleId = this.Columns["ModuleId"];
<font color= "blue">                </font>this.columnModuleTitle = this.Columns["ModuleTitle"];
<font color= "blue">                </font>this.columnEditRoles = this.Columns["EditRoles"];
<font color= "blue">                </font>this.columnModuleDefId = this.Columns["ModuleDefId"];
<font color= "blue">                </font>this.columnPaneName = this.Columns["PaneName"];
<font color= "blue">                </font>this.columnCacheTimeout = this.Columns["CacheTimeout"];
<font color= "blue">                </font>this.columnModuleOrder = this.Columns["ModuleOrder"];
<font color= "blue">                </font>this.columnShowMobile = this.Columns["ShowMobile"];
<font color= "blue">                </font>this.columnTabId = this.Columns["TabId"];
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            private void</font> InitClass() {
<font color= "blue">                </font>this.columnModuleId = new DataColumn("ModuleId", typeof(int), null, System.Data.MappingType.Attribute);
<font color= "blue">                </font>this.Columns.Add(this.columnModuleId);
<font color= "blue">                </font>this.columnModuleTitle = new DataColumn("ModuleTitle", typeof(string), null, System.Data.MappingType.Attribute);
<font color= "blue">                </font>this.Columns.Add(this.columnModuleTitle);
<font color= "blue">                </font>this.columnEditRoles = new DataColumn("EditRoles", typeof(string), null, System.Data.MappingType.Attribute);
<font color= "blue">                </font>this.Columns.Add(this.columnEditRoles);
<font color= "blue">                </font>this.columnModuleDefId = new DataColumn("ModuleDefId", typeof(int), null, System.Data.MappingType.Attribute);
<font color= "blue">                </font>this.Columns.Add(this.columnModuleDefId);
<font color= "blue">                </font>this.columnPaneName = new DataColumn("PaneName", typeof(string), null, System.Data.MappingType.Attribute);
<font color= "blue">                </font>this.Columns.Add(this.columnPaneName);
<font color= "blue">                </font>this.columnCacheTimeout = new DataColumn("CacheTimeout", typeof(int), null, System.Data.MappingType.Attribute);
<font color= "blue">                </font>this.Columns.Add(this.columnCacheTimeout);
<font color= "blue">                </font>this.columnModuleOrder = new DataColumn("ModuleOrder", typeof(int), null, System.Data.MappingType.Attribute);
<font color= "blue">                </font>this.Columns.Add(this.columnModuleOrder);
<font color= "blue">                </font>this.columnShowMobile = new DataColumn("ShowMobile", typeof(bool), null, System.Data.MappingType.Attribute);
<font color= "blue">                </font>this.Columns.Add(this.columnShowMobile);
<font color= "blue">                </font>this.columnTabId = new DataColumn("TabId", typeof(int), null, System.Data.MappingType.Hidden);
<font color= "blue">                </font>this.Columns.Add(this.columnTabId);
<font color= "blue">                </font>this.Constraints.Add(new UniqueConstraint("ModuleKey", new DataColumn[] {
<font color= "blue">                                </font>this.columnModuleId}, true));
<font color= "blue">                </font>this.columnModuleId.AllowDBNull = false;
<font color= "blue">                </font>this.columnModuleId.Unique = true;
<font color= "blue">                </font>this.columnModuleId.Namespace = "";
<font color= "blue">                </font>this.columnModuleTitle.Namespace = "";
<font color= "blue">                </font>this.columnEditRoles.Namespace = "";
<font color= "blue">                </font>this.columnModuleDefId.Namespace = "";
<font color= "blue">                </font>this.columnPaneName.Namespace = "";
<font color= "blue">                </font>this.columnCacheTimeout.Namespace = "";
<font color= "blue">                </font>this.columnModuleOrder.Namespace = "";
<font color= "blue">                </font>this.columnShowMobile.Namespace = "";
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>ModuleRow NewModuleRow() {
<font color= "blue">                return</font> ((ModuleRow)(this.NewRow()));
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override DataRow NewRowFromBuilder(DataRowBuilder builder) {
<font color= "blue">                return</font> new ModuleRow(builder);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override System.Type GetRowType() {
<font color= "blue">                return</font> typeof(ModuleRow);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override void OnRowChanged(DataRowChangeEventArgs e) {
<font color= "blue">                </font>base.OnRowChanged(e);
<font color= "blue"></font><font color= "blue">                if </font>((this.ModuleRowChanged != null)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.ModuleRowChanged(this, new ModuleRowChangeEvent(((ModuleRow)(e.Row)), e.Action));
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override void OnRowChanging(DataRowChangeEventArgs e) {
<font color= "blue">                </font>base.OnRowChanging(e);
<font color= "blue"></font><font color= "blue">                if </font>((this.ModuleRowChanging != null)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.ModuleRowChanging(this, new ModuleRowChangeEvent(((ModuleRow)(e.Row)), e.Action));
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override void OnRowDeleted(DataRowChangeEventArgs e) {
<font color= "blue">                </font>base.OnRowDeleted(e);
<font color= "blue"></font><font color= "blue">                if </font>((this.ModuleRowDeleted != null)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.ModuleRowDeleted(this, new ModuleRowChangeEvent(((ModuleRow)(e.Row)), e.Action));
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override void OnRowDeleting(DataRowChangeEventArgs e) {
<font color= "blue">                </font>base.OnRowDeleting(e);
<font color= "blue"></font><font color= "blue">                if </font>((this.ModuleRowDeleting != null)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.ModuleRowDeleting(this, new ModuleRowChangeEvent(((ModuleRow)(e.Row)), e.Action));
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public void</font> RemoveModuleRow(ModuleRow row) {
<font color= "blue">                </font>this.Rows.Remove(row);
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        </font>[System.Diagnostics.DebuggerStepThrough()]
<font color= "blue">        public class</font> ModuleRow : DataRow {
<font color= "blue">            </font>
<font color= "blue">            private </font>ModuleDataTable tableModule;
<font color= "blue">            </font>
<font color= "blue">            </font>internal ModuleRow(DataRowBuilder rb) : 
<font color= "blue">                    </font>base(rb) {
<font color= "blue">                </font>this.tableModule = ((ModuleDataTable)(this.Table));
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>int ModuleId {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> ((int)(this[this.tableModule.ModuleIdColumn]));
<font color= "blue">                </font>}
<font color= "blue">                set</font> {
<font color= "blue">                    </font>this[this.tableModule.ModuleIdColumn] = value;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>string ModuleTitle {
<font color= "blue">                get</font> {
<font color= "blue">                    try</font> {
<font color= "blue">                        return</font> ((string)(this[this.tableModule.ModuleTitleColumn]));
<font color= "blue">                    </font>}
<font color= "blue">                    catch</font> (InvalidCastException e) {
<font color= "blue">                        </font>throw new StrongTypingException("Cannot get value because it is DBNull.", e);
<font color= "blue">                    </font>}
<font color= "blue">                </font>}
<font color= "blue">                set</font> {
<font color= "blue">                    </font>this[this.tableModule.ModuleTitleColumn] = value;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>string EditRoles {
<font color= "blue">                get</font> {
<font color= "blue">                    try</font> {
<font color= "blue">                        return</font> ((string)(this[this.tableModule.EditRolesColumn]));
<font color= "blue">                    </font>}
<font color= "blue">                    catch</font> (InvalidCastException e) {
<font color= "blue">                        </font>throw new StrongTypingException("Cannot get value because it is DBNull.", e);
<font color= "blue">                    </font>}
<font color= "blue">                </font>}
<font color= "blue">                set</font> {
<font color= "blue">                    </font>this[this.tableModule.EditRolesColumn] = value;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>int ModuleDefId {
<font color= "blue">                get</font> {
<font color= "blue">                    try</font> {
<font color= "blue">                        return</font> ((int)(this[this.tableModule.ModuleDefIdColumn]));
<font color= "blue">                    </font>}
<font color= "blue">                    catch</font> (InvalidCastException e) {
<font color= "blue">                        </font>throw new StrongTypingException("Cannot get value because it is DBNull.", e);
<font color= "blue">                    </font>}
<font color= "blue">                </font>}
<font color= "blue">                set</font> {
<font color= "blue">                    </font>this[this.tableModule.ModuleDefIdColumn] = value;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>string PaneName {
<font color= "blue">                get</font> {
<font color= "blue">                    try</font> {
<font color= "blue">                        return</font> ((string)(this[this.tableModule.PaneNameColumn]));
<font color= "blue">                    </font>}
<font color= "blue">                    catch</font> (InvalidCastException e) {
<font color= "blue">                        </font>throw new StrongTypingException("Cannot get value because it is DBNull.", e);
<font color= "blue">                    </font>}
<font color= "blue">                </font>}
<font color= "blue">                set</font> {
<font color= "blue">                    </font>this[this.tableModule.PaneNameColumn] = value;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>int CacheTimeout {
<font color= "blue">                get</font> {
<font color= "blue">                    try</font> {
<font color= "blue">                        return</font> ((int)(this[this.tableModule.CacheTimeoutColumn]));
<font color= "blue">                    </font>}
<font color= "blue">                    catch</font> (InvalidCastException e) {
<font color= "blue">                        </font>throw new StrongTypingException("Cannot get value because it is DBNull.", e);
<font color= "blue">                    </font>}
<font color= "blue">                </font>}
<font color= "blue">                set</font> {
<font color= "blue">                    </font>this[this.tableModule.CacheTimeoutColumn] = value;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>int ModuleOrder {
<font color= "blue">                get</font> {
<font color= "blue">                    try</font> {
<font color= "blue">                        return</font> ((int)(this[this.tableModule.ModuleOrderColumn]));
<font color= "blue">                    </font>}
<font color= "blue">                    catch</font> (InvalidCastException e) {
<font color= "blue">                        </font>throw new StrongTypingException("Cannot get value because it is DBNull.", e);
<font color= "blue">                    </font>}
<font color= "blue">                </font>}
<font color= "blue">                set</font> {
<font color= "blue">                    </font>this[this.tableModule.ModuleOrderColumn] = value;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>bool ShowMobile {
<font color= "blue">                get</font> {
<font color= "blue">                    try</font> {
<font color= "blue">                        return</font> ((bool)(this[this.tableModule.ShowMobileColumn]));
<font color= "blue">                    </font>}
<font color= "blue">                    catch</font> (InvalidCastException e) {
<font color= "blue">                        </font>throw new StrongTypingException("Cannot get value because it is DBNull.", e);
<font color= "blue">                    </font>}
<font color= "blue">                </font>}
<font color= "blue">                set</font> {
<font color= "blue">                    </font>this[this.tableModule.ShowMobileColumn] = value;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>TabRow TabRow {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> ((TabRow)(this.GetParentRow(this.Table.ParentRelations["Tab_Module"])));
<font color= "blue">                </font>}
<font color= "blue">                set</font> {
<font color= "blue">                    </font>this.SetParentRow(value, this.Table.ParentRelations["Tab_Module"]);
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>bool IsModuleTitleNull() {
<font color= "blue">                return</font> this.IsNull(this.tableModule.ModuleTitleColumn);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public void</font> SetModuleTitleNull() {
<font color= "blue">                </font>this[this.tableModule.ModuleTitleColumn] = System.Convert.DBNull;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>bool IsEditRolesNull() {
<font color= "blue">                return</font> this.IsNull(this.tableModule.EditRolesColumn);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public void</font> SetEditRolesNull() {
<font color= "blue">                </font>this[this.tableModule.EditRolesColumn] = System.Convert.DBNull;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>bool IsModuleDefIdNull() {
<font color= "blue">                return</font> this.IsNull(this.tableModule.ModuleDefIdColumn);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public void</font> SetModuleDefIdNull() {
<font color= "blue">                </font>this[this.tableModule.ModuleDefIdColumn] = System.Convert.DBNull;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>bool IsPaneNameNull() {
<font color= "blue">                return</font> this.IsNull(this.tableModule.PaneNameColumn);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public void</font> SetPaneNameNull() {
<font color= "blue">                </font>this[this.tableModule.PaneNameColumn] = System.Convert.DBNull;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>bool IsCacheTimeoutNull() {
<font color= "blue">                return</font> this.IsNull(this.tableModule.CacheTimeoutColumn);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public void</font> SetCacheTimeoutNull() {
<font color= "blue">                </font>this[this.tableModule.CacheTimeoutColumn] = System.Convert.DBNull;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>bool IsModuleOrderNull() {
<font color= "blue">                return</font> this.IsNull(this.tableModule.ModuleOrderColumn);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public void</font> SetModuleOrderNull() {
<font color= "blue">                </font>this[this.tableModule.ModuleOrderColumn] = System.Convert.DBNull;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>bool IsShowMobileNull() {
<font color= "blue">                return</font> this.IsNull(this.tableModule.ShowMobileColumn);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public void</font> SetShowMobileNull() {
<font color= "blue">                </font>this[this.tableModule.ShowMobileColumn] = System.Convert.DBNull;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>SettingsRow[] GetSettingsRows() {
<font color= "blue">                return</font> ((SettingsRow[])(this.GetChildRows(this.Table.ChildRelations["Module_Settings"])));
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        </font>[System.Diagnostics.DebuggerStepThrough()]
<font color= "blue">        public class</font> ModuleRowChangeEvent : EventArgs {
<font color= "blue">            </font>
<font color= "blue">            private </font>ModuleRow eventRow;
<font color= "blue">            </font>
<font color= "blue">            private </font>DataRowAction eventAction;
<font color= "blue">            </font>
<font color= "blue">            public </font>ModuleRowChangeEvent(ModuleRow row, DataRowAction action) {
<font color= "blue">                </font>this.eventRow = row;
<font color= "blue">                </font>this.eventAction = action;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>ModuleRow Row {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.eventRow;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>DataRowAction Action {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.eventAction;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        </font>[System.Diagnostics.DebuggerStepThrough()]
<font color= "blue">        public class</font> SettingsDataTable : DataTable, System.Collections.IEnumerable {
<font color= "blue">            </font>
<font color= "blue">            private </font>DataColumn columnSettings_Id;
<font color= "blue">            </font>
<font color= "blue">            private </font>DataColumn columnModuleId;
<font color= "blue">            </font>
<font color= "blue">            </font>internal SettingsDataTable() : 
<font color= "blue">                    </font>base("Settings") {
<font color= "blue">                </font>this.InitClass();
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal SettingsDataTable(DataTable table) : 
<font color= "blue">                    </font>base(table.TableName) {
<font color= "blue"></font><font color= "blue">                if </font>((table.CaseSensitive != table.DataSet.CaseSensitive)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.CaseSensitive = table.CaseSensitive;
<font color= "blue">                </font>}
<font color= "blue"></font><font color= "blue">                if </font>((table.Locale.ToString() != table.DataSet.Locale.ToString())) {<font color= "blue"></font>
<font color= "blue">                    </font>this.Locale = table.Locale;
<font color= "blue">                </font>}
<font color= "blue"></font><font color= "blue">                if </font>((table.Namespace != table.DataSet.Namespace)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.Namespace = table.Namespace;
<font color= "blue">                </font>}
<font color= "blue">                </font>this.Prefix = table.Prefix;
<font color= "blue">                </font>this.MinimumCapacity = table.MinimumCapacity;
<font color= "blue">                </font>this.DisplayExpression = table.DisplayExpression;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>[System.ComponentModel.Browsable(false)]
<font color= "blue">            public </font>int Count {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.Rows.Count;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal DataColumn Settings_IdColumn {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.columnSettings_Id;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal DataColumn ModuleIdColumn {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.columnModuleId;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>SettingsRow this[int index] {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> ((SettingsRow)(this.Rows[index]));
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>event SettingsRowChangeEventHandler SettingsRowChanged;
<font color= "blue">            </font>
<font color= "blue">            public </font>event SettingsRowChangeEventHandler SettingsRowChanging;
<font color= "blue">            </font>
<font color= "blue">            public </font>event SettingsRowChangeEventHandler SettingsRowDeleted;
<font color= "blue">            </font>
<font color= "blue">            public </font>event SettingsRowChangeEventHandler SettingsRowDeleting;
<font color= "blue">            </font>
<font color= "blue">            public void</font> AddSettingsRow(SettingsRow row) {
<font color= "blue">                </font>this.Rows.Add(row);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>SettingsRow AddSettingsRow(ModuleRow parentModuleRowByModule_Settings) {
<font color= "blue">                </font>SettingsRow rowSettingsRow = ((SettingsRow)(this.NewRow()));
<font color= "blue">                </font>rowSettingsRow.ItemArray = new object[] {
<font color= "blue">                        </font>null,
<font color= "blue">                        </font>parentModuleRowByModule_Settings[0]};
<font color= "blue">                </font>this.Rows.Add(rowSettingsRow);
<font color= "blue">                return</font> rowSettingsRow;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>System.Collections.IEnumerator GetEnumerator() {
<font color= "blue">                return</font> this.Rows.GetEnumerator();
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>override DataTable Clone() {
<font color= "blue">                </font>SettingsDataTable cln = ((SettingsDataTable)(base.Clone()));
<font color= "blue">                </font>cln.InitVars();
<font color= "blue">                return</font> cln;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override DataTable CreateInstance() {
<font color= "blue">                return</font> new SettingsDataTable();
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal void InitVars() {
<font color= "blue">                </font>this.columnSettings_Id = this.Columns["Settings_Id"];
<font color= "blue">                </font>this.columnModuleId = this.Columns["ModuleId"];
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            private void</font> InitClass() {
<font color= "blue">                </font>this.columnSettings_Id = new DataColumn("Settings_Id", typeof(int), null, System.Data.MappingType.Hidden);
<font color= "blue">                </font>this.Columns.Add(this.columnSettings_Id);
<font color= "blue">                </font>this.columnModuleId = new DataColumn("ModuleId", typeof(int), null, System.Data.MappingType.Hidden);
<font color= "blue">                </font>this.Columns.Add(this.columnModuleId);
<font color= "blue">                </font>this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
<font color= "blue">                                </font>this.columnSettings_Id}, true));
<font color= "blue">                </font>this.columnSettings_Id.AutoIncrement = true;
<font color= "blue">                </font>this.columnSettings_Id.AllowDBNull = false;
<font color= "blue">                </font>this.columnSettings_Id.Unique = true;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>SettingsRow NewSettingsRow() {
<font color= "blue">                return</font> ((SettingsRow)(this.NewRow()));
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override DataRow NewRowFromBuilder(DataRowBuilder builder) {
<font color= "blue">                return</font> new SettingsRow(builder);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override System.Type GetRowType() {
<font color= "blue">                return</font> typeof(SettingsRow);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override void OnRowChanged(DataRowChangeEventArgs e) {
<font color= "blue">                </font>base.OnRowChanged(e);
<font color= "blue"></font><font color= "blue">                if </font>((this.SettingsRowChanged != null)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.SettingsRowChanged(this, new SettingsRowChangeEvent(((SettingsRow)(e.Row)), e.Action));
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override void OnRowChanging(DataRowChangeEventArgs e) {
<font color= "blue">                </font>base.OnRowChanging(e);
<font color= "blue"></font><font color= "blue">                if </font>((this.SettingsRowChanging != null)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.SettingsRowChanging(this, new SettingsRowChangeEvent(((SettingsRow)(e.Row)), e.Action));
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override void OnRowDeleted(DataRowChangeEventArgs e) {
<font color= "blue">                </font>base.OnRowDeleted(e);
<font color= "blue"></font><font color= "blue">                if </font>((this.SettingsRowDeleted != null)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.SettingsRowDeleted(this, new SettingsRowChangeEvent(((SettingsRow)(e.Row)), e.Action));
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override void OnRowDeleting(DataRowChangeEventArgs e) {
<font color= "blue">                </font>base.OnRowDeleting(e);
<font color= "blue"></font><font color= "blue">                if </font>((this.SettingsRowDeleting != null)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.SettingsRowDeleting(this, new SettingsRowChangeEvent(((SettingsRow)(e.Row)), e.Action));
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public void</font> RemoveSettingsRow(SettingsRow row) {
<font color= "blue">                </font>this.Rows.Remove(row);
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        </font>[System.Diagnostics.DebuggerStepThrough()]
<font color= "blue">        public class</font> SettingsRow : DataRow {
<font color= "blue">            </font>
<font color= "blue">            private </font>SettingsDataTable tableSettings;
<font color= "blue">            </font>
<font color= "blue">            </font>internal SettingsRow(DataRowBuilder rb) : 
<font color= "blue">                    </font>base(rb) {
<font color= "blue">                </font>this.tableSettings = ((SettingsDataTable)(this.Table));
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>ModuleRow ModuleRow {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> ((ModuleRow)(this.GetParentRow(this.Table.ParentRelations["Module_Settings"])));
<font color= "blue">                </font>}
<font color= "blue">                set</font> {
<font color= "blue">                    </font>this.SetParentRow(value, this.Table.ParentRelations["Module_Settings"]);
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>SettingRow[] GetSettingRows() {
<font color= "blue">                return</font> ((SettingRow[])(this.GetChildRows(this.Table.ChildRelations["Settings_Setting"])));
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        </font>[System.Diagnostics.DebuggerStepThrough()]
<font color= "blue">        public class</font> SettingsRowChangeEvent : EventArgs {
<font color= "blue">            </font>
<font color= "blue">            private </font>SettingsRow eventRow;
<font color= "blue">            </font>
<font color= "blue">            private </font>DataRowAction eventAction;
<font color= "blue">            </font>
<font color= "blue">            public </font>SettingsRowChangeEvent(SettingsRow row, DataRowAction action) {
<font color= "blue">                </font>this.eventRow = row;
<font color= "blue">                </font>this.eventAction = action;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>SettingsRow Row {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.eventRow;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>DataRowAction Action {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.eventAction;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        </font>[System.Diagnostics.DebuggerStepThrough()]
<font color= "blue">        public class</font> SettingDataTable : DataTable, System.Collections.IEnumerable {
<font color= "blue">            </font>
<font color= "blue">            private </font>DataColumn columnName;
<font color= "blue">            </font>
<font color= "blue">            private </font>DataColumn columnSetting_Text;
<font color= "blue">            </font>
<font color= "blue">            private </font>DataColumn columnSettings_Id;
<font color= "blue">            </font>
<font color= "blue">            </font>internal SettingDataTable() : 
<font color= "blue">                    </font>base("Setting") {
<font color= "blue">                </font>this.InitClass();
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal SettingDataTable(DataTable table) : 
<font color= "blue">                    </font>base(table.TableName) {
<font color= "blue"></font><font color= "blue">                if </font>((table.CaseSensitive != table.DataSet.CaseSensitive)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.CaseSensitive = table.CaseSensitive;
<font color= "blue">                </font>}
<font color= "blue"></font><font color= "blue">                if </font>((table.Locale.ToString() != table.DataSet.Locale.ToString())) {<font color= "blue"></font>
<font color= "blue">                    </font>this.Locale = table.Locale;
<font color= "blue">                </font>}
<font color= "blue"></font><font color= "blue">                if </font>((table.Namespace != table.DataSet.Namespace)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.Namespace = table.Namespace;
<font color= "blue">                </font>}
<font color= "blue">                </font>this.Prefix = table.Prefix;
<font color= "blue">                </font>this.MinimumCapacity = table.MinimumCapacity;
<font color= "blue">                </font>this.DisplayExpression = table.DisplayExpression;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>[System.ComponentModel.Browsable(false)]
<font color= "blue">            public </font>int Count {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.Rows.Count;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal DataColumn NameColumn {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.columnName;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal DataColumn Setting_TextColumn {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.columnSetting_Text;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal DataColumn Settings_IdColumn {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.columnSettings_Id;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>SettingRow this[int index] {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> ((SettingRow)(this.Rows[index]));
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>event SettingRowChangeEventHandler SettingRowChanged;
<font color= "blue">            </font>
<font color= "blue">            public </font>event SettingRowChangeEventHandler SettingRowChanging;
<font color= "blue">            </font>
<font color= "blue">            public </font>event SettingRowChangeEventHandler SettingRowDeleted;
<font color= "blue">            </font>
<font color= "blue">            public </font>event SettingRowChangeEventHandler SettingRowDeleting;
<font color= "blue">            </font>
<font color= "blue">            public void</font> AddSettingRow(SettingRow row) {
<font color= "blue">                </font>this.Rows.Add(row);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>SettingRow AddSettingRow(string Name, string Setting_Text, SettingsRow parentSettingsRowBySettings_Setting) {
<font color= "blue">                </font>SettingRow rowSettingRow = ((SettingRow)(this.NewRow()));
<font color= "blue">                </font>rowSettingRow.ItemArray = new object[] {
<font color= "blue">                        </font>Name,
<font color= "blue">                        </font>Setting_Text,
<font color= "blue">                        </font>parentSettingsRowBySettings_Setting[0]};
<font color= "blue">                </font>this.Rows.Add(rowSettingRow);
<font color= "blue">                return</font> rowSettingRow;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>System.Collections.IEnumerator GetEnumerator() {
<font color= "blue">                return</font> this.Rows.GetEnumerator();
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>override DataTable Clone() {
<font color= "blue">                </font>SettingDataTable cln = ((SettingDataTable)(base.Clone()));
<font color= "blue">                </font>cln.InitVars();
<font color= "blue">                return</font> cln;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override DataTable CreateInstance() {
<font color= "blue">                return</font> new SettingDataTable();
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal void InitVars() {
<font color= "blue">                </font>this.columnName = this.Columns["Name"];
<font color= "blue">                </font>this.columnSetting_Text = this.Columns["Setting_Text"];
<font color= "blue">                </font>this.columnSettings_Id = this.Columns["Settings_Id"];
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            private void</font> InitClass() {
<font color= "blue">                </font>this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
<font color= "blue">                </font>this.Columns.Add(this.columnName);
<font color= "blue">                </font>this.columnSetting_Text = new DataColumn("Setting_Text", typeof(string), null, System.Data.MappingType.SimpleContent);
<font color= "blue">                </font>this.Columns.Add(this.columnSetting_Text);
<font color= "blue">                </font>this.columnSettings_Id = new DataColumn("Settings_Id", typeof(int), null, System.Data.MappingType.Hidden);
<font color= "blue">                </font>this.Columns.Add(this.columnSettings_Id);
<font color= "blue">                </font>this.columnName.Namespace = "";
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>SettingRow NewSettingRow() {
<font color= "blue">                return</font> ((SettingRow)(this.NewRow()));
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override DataRow NewRowFromBuilder(DataRowBuilder builder) {
<font color= "blue">                return</font> new SettingRow(builder);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override System.Type GetRowType() {
<font color= "blue">                return</font> typeof(SettingRow);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override void OnRowChanged(DataRowChangeEventArgs e) {
<font color= "blue">                </font>base.OnRowChanged(e);
<font color= "blue"></font><font color= "blue">                if </font>((this.SettingRowChanged != null)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.SettingRowChanged(this, new SettingRowChangeEvent(((SettingRow)(e.Row)), e.Action));
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override void OnRowChanging(DataRowChangeEventArgs e) {
<font color= "blue">                </font>base.OnRowChanging(e);
<font color= "blue"></font><font color= "blue">                if </font>((this.SettingRowChanging != null)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.SettingRowChanging(this, new SettingRowChangeEvent(((SettingRow)(e.Row)), e.Action));
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override void OnRowDeleted(DataRowChangeEventArgs e) {
<font color= "blue">                </font>base.OnRowDeleted(e);
<font color= "blue"></font><font color= "blue">                if </font>((this.SettingRowDeleted != null)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.SettingRowDeleted(this, new SettingRowChangeEvent(((SettingRow)(e.Row)), e.Action));
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override void OnRowDeleting(DataRowChangeEventArgs e) {
<font color= "blue">                </font>base.OnRowDeleting(e);
<font color= "blue"></font><font color= "blue">                if </font>((this.SettingRowDeleting != null)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.SettingRowDeleting(this, new SettingRowChangeEvent(((SettingRow)(e.Row)), e.Action));
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public void</font> RemoveSettingRow(SettingRow row) {
<font color= "blue">                </font>this.Rows.Remove(row);
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        </font>[System.Diagnostics.DebuggerStepThrough()]
<font color= "blue">        public class</font> SettingRow : DataRow {
<font color= "blue">            </font>
<font color= "blue">            private </font>SettingDataTable tableSetting;
<font color= "blue">            </font>
<font color= "blue">            </font>internal SettingRow(DataRowBuilder rb) : 
<font color= "blue">                    </font>base(rb) {
<font color= "blue">                </font>this.tableSetting = ((SettingDataTable)(this.Table));
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>string Name {
<font color= "blue">                get</font> {
<font color= "blue">                    try</font> {
<font color= "blue">                        return</font> ((string)(this[this.tableSetting.NameColumn]));
<font color= "blue">                    </font>}
<font color= "blue">                    catch</font> (InvalidCastException e) {
<font color= "blue">                        </font>throw new StrongTypingException("Cannot get value because it is DBNull.", e);
<font color= "blue">                    </font>}
<font color= "blue">                </font>}
<font color= "blue">                set</font> {
<font color= "blue">                    </font>this[this.tableSetting.NameColumn] = value;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>string Setting_Text {
<font color= "blue">                get</font> {
<font color= "blue">                    try</font> {
<font color= "blue">                        return</font> ((string)(this[this.tableSetting.Setting_TextColumn]));
<font color= "blue">                    </font>}
<font color= "blue">                    catch</font> (InvalidCastException e) {
<font color= "blue">                        </font>throw new StrongTypingException("Cannot get value because it is DBNull.", e);
<font color= "blue">                    </font>}
<font color= "blue">                </font>}
<font color= "blue">                set</font> {
<font color= "blue">                    </font>this[this.tableSetting.Setting_TextColumn] = value;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>SettingsRow SettingsRow {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> ((SettingsRow)(this.GetParentRow(this.Table.ParentRelations["Settings_Setting"])));
<font color= "blue">                </font>}
<font color= "blue">                set</font> {
<font color= "blue">                    </font>this.SetParentRow(value, this.Table.ParentRelations["Settings_Setting"]);
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>bool IsNameNull() {
<font color= "blue">                return</font> this.IsNull(this.tableSetting.NameColumn);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public void</font> SetNameNull() {
<font color= "blue">                </font>this[this.tableSetting.NameColumn] = System.Convert.DBNull;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>bool IsSetting_TextNull() {
<font color= "blue">                return</font> this.IsNull(this.tableSetting.Setting_TextColumn);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public void</font> SetSetting_TextNull() {
<font color= "blue">                </font>this[this.tableSetting.Setting_TextColumn] = System.Convert.DBNull;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        </font>[System.Diagnostics.DebuggerStepThrough()]
<font color= "blue">        public class</font> SettingRowChangeEvent : EventArgs {
<font color= "blue">            </font>
<font color= "blue">            private </font>SettingRow eventRow;
<font color= "blue">            </font>
<font color= "blue">            private </font>DataRowAction eventAction;
<font color= "blue">            </font>
<font color= "blue">            public </font>SettingRowChangeEvent(SettingRow row, DataRowAction action) {
<font color= "blue">                </font>this.eventRow = row;
<font color= "blue">                </font>this.eventAction = action;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>SettingRow Row {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.eventRow;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>DataRowAction Action {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.eventAction;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        </font>[System.Diagnostics.DebuggerStepThrough()]
<font color= "blue">        public class</font> ModuleDefinitionDataTable : DataTable, System.Collections.IEnumerable {
<font color= "blue">            </font>
<font color= "blue">            private </font>DataColumn columnFriendlyName;
<font color= "blue">            </font>
<font color= "blue">            private </font>DataColumn columnMobileSourceFile;
<font color= "blue">            </font>
<font color= "blue">            private </font>DataColumn columnDesktopSourceFile;
<font color= "blue">            </font>
<font color= "blue">            private </font>DataColumn columnModuleDefId;
<font color= "blue">            </font>
<font color= "blue">            </font>internal ModuleDefinitionDataTable() : 
<font color= "blue">                    </font>base("ModuleDefinition") {
<font color= "blue">                </font>this.InitClass();
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal ModuleDefinitionDataTable(DataTable table) : 
<font color= "blue">                    </font>base(table.TableName) {
<font color= "blue"></font><font color= "blue">                if </font>((table.CaseSensitive != table.DataSet.CaseSensitive)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.CaseSensitive = table.CaseSensitive;
<font color= "blue">                </font>}
<font color= "blue"></font><font color= "blue">                if </font>((table.Locale.ToString() != table.DataSet.Locale.ToString())) {<font color= "blue"></font>
<font color= "blue">                    </font>this.Locale = table.Locale;
<font color= "blue">                </font>}
<font color= "blue"></font><font color= "blue">                if </font>((table.Namespace != table.DataSet.Namespace)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.Namespace = table.Namespace;
<font color= "blue">                </font>}
<font color= "blue">                </font>this.Prefix = table.Prefix;
<font color= "blue">                </font>this.MinimumCapacity = table.MinimumCapacity;
<font color= "blue">                </font>this.DisplayExpression = table.DisplayExpression;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>[System.ComponentModel.Browsable(false)]
<font color= "blue">            public </font>int Count {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.Rows.Count;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal DataColumn FriendlyNameColumn {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.columnFriendlyName;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal DataColumn MobileSourceFileColumn {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.columnMobileSourceFile;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal DataColumn DesktopSourceFileColumn {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.columnDesktopSourceFile;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal DataColumn ModuleDefIdColumn {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.columnModuleDefId;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>ModuleDefinitionRow this[int index] {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> ((ModuleDefinitionRow)(this.Rows[index]));
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>event ModuleDefinitionRowChangeEventHandler ModuleDefinitionRowChanged;
<font color= "blue">            </font>
<font color= "blue">            public </font>event ModuleDefinitionRowChangeEventHandler ModuleDefinitionRowChanging;
<font color= "blue">            </font>
<font color= "blue">            public </font>event ModuleDefinitionRowChangeEventHandler ModuleDefinitionRowDeleted;
<font color= "blue">            </font>
<font color= "blue">            public </font>event ModuleDefinitionRowChangeEventHandler ModuleDefinitionRowDeleting;
<font color= "blue">            </font>
<font color= "blue">            public void</font> AddModuleDefinitionRow(ModuleDefinitionRow row) {
<font color= "blue">                </font>this.Rows.Add(row);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>ModuleDefinitionRow AddModuleDefinitionRow(string FriendlyName, string MobileSourceFile, string DesktopSourceFile, int ModuleDefId) {
<font color= "blue">                </font>ModuleDefinitionRow rowModuleDefinitionRow = ((ModuleDefinitionRow)(this.NewRow()));
<font color= "blue">                </font>rowModuleDefinitionRow.ItemArray = new object[] {
<font color= "blue">                        </font>FriendlyName,
<font color= "blue">                        </font>MobileSourceFile,
<font color= "blue">                        </font>DesktopSourceFile,
<font color= "blue">                        </font>ModuleDefId};
<font color= "blue">                </font>this.Rows.Add(rowModuleDefinitionRow);
<font color= "blue">                return</font> rowModuleDefinitionRow;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>ModuleDefinitionRow FindByModuleDefId(int ModuleDefId) {
<font color= "blue">                return</font> ((ModuleDefinitionRow)(this.Rows.Find(new object[] {
<font color= "blue">                            </font>ModuleDefId})));
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>System.Collections.IEnumerator GetEnumerator() {
<font color= "blue">                return</font> this.Rows.GetEnumerator();
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>override DataTable Clone() {
<font color= "blue">                </font>ModuleDefinitionDataTable cln = ((ModuleDefinitionDataTable)(base.Clone()));
<font color= "blue">                </font>cln.InitVars();
<font color= "blue">                return</font> cln;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override DataTable CreateInstance() {
<font color= "blue">                return</font> new ModuleDefinitionDataTable();
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            </font>internal void InitVars() {
<font color= "blue">                </font>this.columnFriendlyName = this.Columns["FriendlyName"];
<font color= "blue">                </font>this.columnMobileSourceFile = this.Columns["MobileSourceFile"];
<font color= "blue">                </font>this.columnDesktopSourceFile = this.Columns["DesktopSourceFile"];
<font color= "blue">                </font>this.columnModuleDefId = this.Columns["ModuleDefId"];
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            private void</font> InitClass() {
<font color= "blue">                </font>this.columnFriendlyName = new DataColumn("FriendlyName", typeof(string), null, System.Data.MappingType.Attribute);
<font color= "blue">                </font>this.Columns.Add(this.columnFriendlyName);
<font color= "blue">                </font>this.columnMobileSourceFile = new DataColumn("MobileSourceFile", typeof(string), null, System.Data.MappingType.Attribute);
<font color= "blue">                </font>this.Columns.Add(this.columnMobileSourceFile);
<font color= "blue">                </font>this.columnDesktopSourceFile = new DataColumn("DesktopSourceFile", typeof(string), null, System.Data.MappingType.Attribute);
<font color= "blue">                </font>this.Columns.Add(this.columnDesktopSourceFile);
<font color= "blue">                </font>this.columnModuleDefId = new DataColumn("ModuleDefId", typeof(int), null, System.Data.MappingType.Attribute);
<font color= "blue">                </font>this.Columns.Add(this.columnModuleDefId);
<font color= "blue">                </font>this.Constraints.Add(new UniqueConstraint("ModDefKey", new DataColumn[] {
<font color= "blue">                                </font>this.columnModuleDefId}, true));
<font color= "blue">                </font>this.columnFriendlyName.Namespace = "";
<font color= "blue">                </font>this.columnMobileSourceFile.Namespace = "";
<font color= "blue">                </font>this.columnDesktopSourceFile.Namespace = "";
<font color= "blue">                </font>this.columnModuleDefId.AllowDBNull = false;
<font color= "blue">                </font>this.columnModuleDefId.Unique = true;
<font color= "blue">                </font>this.columnModuleDefId.Namespace = "";
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>ModuleDefinitionRow NewModuleDefinitionRow() {
<font color= "blue">                return</font> ((ModuleDefinitionRow)(this.NewRow()));
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override DataRow NewRowFromBuilder(DataRowBuilder builder) {
<font color= "blue">                return</font> new ModuleDefinitionRow(builder);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override System.Type GetRowType() {
<font color= "blue">                return</font> typeof(ModuleDefinitionRow);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override void OnRowChanged(DataRowChangeEventArgs e) {
<font color= "blue">                </font>base.OnRowChanged(e);
<font color= "blue"></font><font color= "blue">                if </font>((this.ModuleDefinitionRowChanged != null)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.ModuleDefinitionRowChanged(this, new ModuleDefinitionRowChangeEvent(((ModuleDefinitionRow)(e.Row)), e.Action));
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override void OnRowChanging(DataRowChangeEventArgs e) {
<font color= "blue">                </font>base.OnRowChanging(e);
<font color= "blue"></font><font color= "blue">                if </font>((this.ModuleDefinitionRowChanging != null)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.ModuleDefinitionRowChanging(this, new ModuleDefinitionRowChangeEvent(((ModuleDefinitionRow)(e.Row)), e.Action));
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override void OnRowDeleted(DataRowChangeEventArgs e) {
<font color= "blue">                </font>base.OnRowDeleted(e);
<font color= "blue"></font><font color= "blue">                if </font>((this.ModuleDefinitionRowDeleted != null)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.ModuleDefinitionRowDeleted(this, new ModuleDefinitionRowChangeEvent(((ModuleDefinitionRow)(e.Row)), e.Action));
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            protected </font>override void OnRowDeleting(DataRowChangeEventArgs e) {
<font color= "blue">                </font>base.OnRowDeleting(e);
<font color= "blue"></font><font color= "blue">                if </font>((this.ModuleDefinitionRowDeleting != null)) {<font color= "blue"></font>
<font color= "blue">                    </font>this.ModuleDefinitionRowDeleting(this, new ModuleDefinitionRowChangeEvent(((ModuleDefinitionRow)(e.Row)), e.Action));
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public void</font> RemoveModuleDefinitionRow(ModuleDefinitionRow row) {
<font color= "blue">                </font>this.Rows.Remove(row);
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        </font>[System.Diagnostics.DebuggerStepThrough()]
<font color= "blue">        public class</font> ModuleDefinitionRow : DataRow {
<font color= "blue">            </font>
<font color= "blue">            private </font>ModuleDefinitionDataTable tableModuleDefinition;
<font color= "blue">            </font>
<font color= "blue">            </font>internal ModuleDefinitionRow(DataRowBuilder rb) : 
<font color= "blue">                    </font>base(rb) {
<font color= "blue">                </font>this.tableModuleDefinition = ((ModuleDefinitionDataTable)(this.Table));
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>string FriendlyName {
<font color= "blue">                get</font> {
<font color= "blue">                    try</font> {
<font color= "blue">                        return</font> ((string)(this[this.tableModuleDefinition.FriendlyNameColumn]));
<font color= "blue">                    </font>}
<font color= "blue">                    catch</font> (InvalidCastException e) {
<font color= "blue">                        </font>throw new StrongTypingException("Cannot get value because it is DBNull.", e);
<font color= "blue">                    </font>}
<font color= "blue">                </font>}
<font color= "blue">                set</font> {
<font color= "blue">                    </font>this[this.tableModuleDefinition.FriendlyNameColumn] = value;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>string MobileSourceFile {
<font color= "blue">                get</font> {
<font color= "blue">                    try</font> {
<font color= "blue">                        return</font> ((string)(this[this.tableModuleDefinition.MobileSourceFileColumn]));
<font color= "blue">                    </font>}
<font color= "blue">                    catch</font> (InvalidCastException e) {
<font color= "blue">                        </font>throw new StrongTypingException("Cannot get value because it is DBNull.", e);
<font color= "blue">                    </font>}
<font color= "blue">                </font>}
<font color= "blue">                set</font> {
<font color= "blue">                    </font>this[this.tableModuleDefinition.MobileSourceFileColumn] = value;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>string DesktopSourceFile {
<font color= "blue">                get</font> {
<font color= "blue">                    try</font> {
<font color= "blue">                        return</font> ((string)(this[this.tableModuleDefinition.DesktopSourceFileColumn]));
<font color= "blue">                    </font>}
<font color= "blue">                    catch</font> (InvalidCastException e) {
<font color= "blue">                        </font>throw new StrongTypingException("Cannot get value because it is DBNull.", e);
<font color= "blue">                    </font>}
<font color= "blue">                </font>}
<font color= "blue">                set</font> {
<font color= "blue">                    </font>this[this.tableModuleDefinition.DesktopSourceFileColumn] = value;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>int ModuleDefId {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> ((int)(this[this.tableModuleDefinition.ModuleDefIdColumn]));
<font color= "blue">                </font>}
<font color= "blue">                set</font> {
<font color= "blue">                    </font>this[this.tableModuleDefinition.ModuleDefIdColumn] = value;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>bool IsFriendlyNameNull() {
<font color= "blue">                return</font> this.IsNull(this.tableModuleDefinition.FriendlyNameColumn);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public void</font> SetFriendlyNameNull() {
<font color= "blue">                </font>this[this.tableModuleDefinition.FriendlyNameColumn] = System.Convert.DBNull;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>bool IsMobileSourceFileNull() {
<font color= "blue">                return</font> this.IsNull(this.tableModuleDefinition.MobileSourceFileColumn);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public void</font> SetMobileSourceFileNull() {
<font color= "blue">                </font>this[this.tableModuleDefinition.MobileSourceFileColumn] = System.Convert.DBNull;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>bool IsDesktopSourceFileNull() {
<font color= "blue">                return</font> this.IsNull(this.tableModuleDefinition.DesktopSourceFileColumn);
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public void</font> SetDesktopSourceFileNull() {
<font color= "blue">                </font>this[this.tableModuleDefinition.DesktopSourceFileColumn] = System.Convert.DBNull;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue">        </font>
<font color= "blue">        </font>[System.Diagnostics.DebuggerStepThrough()]
<font color= "blue">        public class</font> ModuleDefinitionRowChangeEvent : EventArgs {
<font color= "blue">            </font>
<font color= "blue">            private </font>ModuleDefinitionRow eventRow;
<font color= "blue">            </font>
<font color= "blue">            private </font>DataRowAction eventAction;
<font color= "blue">            </font>
<font color= "blue">            public </font>ModuleDefinitionRowChangeEvent(ModuleDefinitionRow row, DataRowAction action) {
<font color= "blue">                </font>this.eventRow = row;
<font color= "blue">                </font>this.eventAction = action;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>ModuleDefinitionRow Row {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.eventRow;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue">            public </font>DataRowAction Action {
<font color= "blue">                get</font> {
<font color= "blue">                    return</font> this.eventAction;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue">    </font>}
<font color= "blue"></font>}
</pre>