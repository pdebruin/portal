<html><head><link rel=stylesheet href=style.css></head><body><div class=SourcePanel style='font-size:12'><pre style='background-color:white'>
<font color= "blue">using</font> System;
<font color= "blue">using</font> System.Data;
<font color= "blue">using</font> System.Drawing;
<font color= "blue">using</font> System.Collections;
<font color= "blue">using</font> System.Collections.Specialized;
<font color= "blue">using</font> System.ComponentModel;
<font color= "blue">using</font> System.Web;
<font color= "blue">using</font> System.Web.UI;
<font color= "blue">using</font> System.Web.UI.MobileControls;
<font color= "blue">using</font> System.Web.UI.MobileControls.Adapters;
<font color= "blue">using</font> ASPNET.StarterKit.Portal.MobileControls;
<font color= "blue"></font>
<font color= "blue"></font>[ assembly:TagPrefix("ASPNET.StarterKit.Portal.MobileControls", "portal") ]
<font color= "blue"></font>
<font color= "blue">namespace</font> ASPNET.StarterKit.Portal {
<font color= "blue"></font>
<font color= "green">    //*********************************************************************</font>
<font color= "green">    //</font>
<font color= "green">    // MobilePortalModuleControl</font>
<font color= "green">    //</font>
<font color= "green">    // The MobilePortalModuleControl class is the base class used for</font>
<font color= "green">    // each module user control in the mobile portal. Since it implements</font>
<font color= "green">    // the IContentsPane interface, any control inheriting from this class</font>
<font color= "green">    // can be used as a module in a portal tab.</font>
<font color= "green">    //</font>
<font color= "green">    //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">    public class</font> MobilePortalModuleControl : UserControl, IContentsPane {
<font color= "blue"></font>
<font color= "blue">        private </font>ModuleSettings _moduleConfiguration;
<font color= "blue">        private </font>Control _summaryControl;
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // MobilePortalModuleControl.ModuleConfiguration Property</font>
<font color= "green">        //</font>
<font color= "green">        // Returns the configuration information for this module.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        public </font>ModuleSettings ModuleConfiguration {
<font color= "blue"></font>
<font color= "blue">            get</font> {
<font color= "blue">                return</font> _moduleConfiguration;
<font color= "blue">            </font>}
<font color= "blue">            set</font> {
<font color= "blue">                </font>_moduleConfiguration = value;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // MobilePortalModuleControl.Tab Property</font>
<font color= "green">        //</font>
<font color= "green">        // Returns the parent portal tab.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        public </font>MobilePortalTab Tab {
<font color= "blue"></font>
<font color= "blue">            get</font> {
<font color= "blue">                return</font> Parent as MobilePortalTab;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // MobilePortalModuleControl.ModuleTitle Property</font>
<font color= "green">        //</font>
<font color= "green">        // Returns the name of this module.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        </font>[Browsable(false),DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
<font color= "blue">        public </font>String ModuleTitle {
<font color= "blue"></font>
<font color= "blue">            get</font> {
<font color= "blue">                return</font> _moduleConfiguration.ModuleTitle;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // MobilePortalModuleControl.ModuleId Property</font>
<font color= "green">        //</font>
<font color= "green">        // Returns the unique ID of this module.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        </font>[Browsable(false),DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
<font color= "blue">        public </font>int ModuleId {
<font color= "blue"></font>
<font color= "blue">            get</font> {
<font color= "blue">                return</font> _moduleConfiguration.ModuleId;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // IContentsPane.Title Property</font>
<font color= "green">        //</font>
<font color= "green">        // Returns the name of the module, to be used as the pane title</font>
<font color= "green">        // when used inside a tab.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        </font>String IPanelPane.Title {
<font color= "blue"></font>
<font color= "blue">            get</font> {
<font color= "blue">                return</font> _moduleConfiguration.ModuleTitle;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // IContentsPane.OnSetSummaryMode Method</font>
<font color= "green">        //</font>
<font color= "green">        // OnSetSummaryMode is called on each child pane when the parent tab</font>
<font color= "green">        // changes from showing summaries to individual details or vice versa.</font>
<font color= "green">        // This method calls the UpdateVisibility utility method to </font>
<font color= "green">        // update the visibility of child controls.</font>
<font color= "green">        // REVIEW: Probably could be done using an event handler instead.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        void</font> IContentsPane.OnSetSummaryMode() {
<font color= "blue"></font>
<font color= "blue">            </font>UpdateVisibility();
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // MobilePortalModuleControl.OnInit Method</font>
<font color= "green">        //</font>
<font color= "green">        // OnInit is called when the control is created and added to the </font>
<font color= "green">        // control tree. OnInit looks for a child control that renders the</font>
<font color= "green">        // summary view of the module, and creates a default one (with a</font>
<font color= "green">        // simple LinkCommand control) if no summary is found.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        protected </font>override void OnInit(EventArgs e) {
<font color= "blue"></font>
<font color= "blue">            </font>base.OnInit(e);
<font color= "blue"></font>
<font color= "green">            // Look for a control that renders the summary.</font>
<font color= "blue">            </font>_summaryControl = FindControl("summary");
<font color= "blue"></font>
<font color= "green">            // There could be no summary control, or the summary control may be</font>
<font color= "green">            // an empty panel. If there's no summary UI, automatically generate one.</font>
<font color= "blue"></font><font color= "blue">            if </font>(_summaryControl == null || (_summaryControl is Panel && !_summaryControl.HasControls())) {<font color= "blue"></font>
<font color= "blue"></font>
<font color= "green">                // Create and initialize a new LinkCommand control</font>
<font color= "blue">                </font>Command command = new LinkCommand();
<font color= "blue">                </font>command.Text = this.ModuleTitle;
<font color= "blue"></font>
<font color= "green">                // Set the command name to the details command, so that</font>
<font color= "green">                // event bubbling can recognize it as a command to go to</font>
<font color= "green">                // details view.</font>
<font color= "blue">                </font>command.CommandName = ContentsPanel.DetailsCommand;
<font color= "blue"></font>
<font color= "green">                // Add it to the appropriate place.</font>
<font color= "blue"></font><font color= "blue">                if </font>(_summaryControl != null) {<font color= "blue"></font>
<font color= "blue"></font>
<font color= "blue">                    </font>_summaryControl.Controls.Add(command);
<font color= "blue">                </font>}
<font color= "blue"></font><font color= "blue">                else </font>{<font color= "blue"></font>
<font color= "blue"></font>
<font color= "blue">                    </font>Controls.Add(command);
<font color= "blue">                    </font>_summaryControl = command;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // MobilePortalModuleControl.OnLoad Method</font>
<font color= "green">        //</font>
<font color= "green">        // OnLoad is called when the control is created and added to the </font>
<font color= "green">        // control tree, after OnInit. OnLoad calls the UpdateVisibility</font>
<font color= "green">        // utility method to update the visibility of child controls.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        protected </font>override void OnLoad(EventArgs e) {
<font color= "blue"></font>
<font color= "blue">            </font>base.OnLoad(e);
<font color= "blue">            </font>UpdateVisibility();
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // MobilePortalModuleControl.UpdateVisibility Method</font>
<font color= "green">        //</font>
<font color= "green">        // UpdateVisibility updates the visibility of child controls</font>
<font color= "green">        // depending on the current setting. If the module is currently</font>
<font color= "green">        // being shown in summary mode, all children except the summary</font>
<font color= "green">        // control are hidden. If the module is currently being shown</font>
<font color= "green">        // in details mode, only the summary control is hidden.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        private void</font> UpdateVisibility() {
<font color= "blue"></font>
<font color= "blue">            </font>bool summary = Tab != null && Tab.SummaryView;
<font color= "blue">            </font>
<font color= "blue">            </font>foreach (Control child in Controls) {
<font color= "blue">                </font>child.Visible = !summary;
<font color= "blue">            </font>}
<font color= "blue">            </font>
<font color= "blue"></font><font color= "blue">            if </font>(_summaryControl != null) {<font color= "blue"></font>
<font color= "blue">                </font>_summaryControl.Visible = summary;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue">    </font>}
<font color= "blue"></font>
<font color= "blue"></font>
<font color= "green">    //*********************************************************************</font>
<font color= "green">    //</font>
<font color= "green">    // MobilePortalTab Class</font>
<font color= "green">    //</font>
<font color= "green">    // The MobilePortalTab class is used for each tab of the mobile </font>
<font color= "green">    // portal.</font>
<font color= "green">    //</font>
<font color= "green">    //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">    public class</font> MobilePortalTab : ContentsPanel {
<font color= "blue">    </font>}
<font color= "blue"></font>}
<font color= "blue"></font>
<font color= "blue">namespace</font> ASPNET.StarterKit.Portal.MobileControls {
<font color= "blue"></font>
<font color= "green">    //*********************************************************************</font>
<font color= "green">    //</font>
<font color= "green">    // LinkCommand Class</font>
<font color= "green">    //</font>
<font color= "green">    // The LinkCommand class is used for a simple custom version of the</font>
<font color= "green">    // Command control. Although the class itself has no added or modified</font>
<font color= "green">    // functionality, it allows a new adapter to be specified. On</font>
<font color= "green">    // HTML devices, this control renders as a hyperlink rather than</font>
<font color= "green">    // a button.</font>
<font color= "green">    //</font>
<font color= "green">    //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">    public class</font> LinkCommand : Command {
<font color= "blue">    </font>}
<font color= "blue"></font>
<font color= "green">    //*********************************************************************</font>
<font color= "green">    //</font>
<font color= "green">    // HtmlLinkCommandAdapter Class</font>
<font color= "green">    //</font>
<font color= "green">    // The HtmlLinkCommandAdapter class is used to render the LinkCommand</font>
<font color= "green">    // control on an HTML device. Unlike the Command control, which renders</font>
<font color= "green">    // as a button, the HtmlLinkCommandAdapter renders a LinkCommand as</font>
<font color= "green">    // a hyperlink. Only the Render method needs to be overriden.</font>
<font color= "green">    //</font>
<font color= "green">    //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">    public class</font> HtmlLinkCommandAdapter : HtmlCommandAdapter {
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // HtmlLinkCommandAdapter.Render Method</font>
<font color= "green">        //</font>
<font color= "green">        // The Render method performs rendering of the LinkCommand control.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        public </font>override void Render(HtmlMobileTextWriter writer) {
<font color= "green">            // Render a postback event as an anchor.</font>
<font color= "blue">            </font>RenderPostBackEventAsAnchor(writer, null, Control.Text);
<font color= "blue"></font>
<font color= "green">            // Write a break, if necessary.</font>
<font color= "blue">            </font>writer.WriteBreak();
<font color= "blue">        </font>}
<font color= "blue">    </font>}
<font color= "blue"></font>
<font color= "green">    //*********************************************************************</font>
<font color= "green">    //</font>
<font color= "green">    // Panels Package</font>
<font color= "green">    //</font>
<font color= "green">    // The Panels Package is a set of bonus mobile controls used for</font>
<font color= "green">    // the Portal Starter Kit. The package provides a new set of </font>
<font color= "green">    // control classes. All of these controls inherit from the </font>
<font color= "green">    // System.Web.UI.MobileControls.Panel class.</font>
<font color= "green">    //</font>
<font color= "green">    //      MultiPanel</font>
<font color= "green">    //          A base class capable of managing multiple child controls,</font>
<font color= "green">    //          called "panes". Each child pane must implement the </font>
<font color= "green">    //          IPanelPane interface.</font>
<font color= "green">    //      ChildPanel</font>
<font color= "green">    //          A base class for panels that can be used as child panes</font>
<font color= "green">    //          of MultiPanel panels. MultiPanel itself inherits from</font>
<font color= "green">    //          ChildPanel, so you can nest one MultiPanel as a child</font>
<font color= "green">    //          pane of another.</font>
<font color= "green">    //      TabbedPanel</font>
<font color= "green">    //          A specialized type of MultiPanel that comes with </font>
<font color= "green">    //          adapters for rendering the panel as a tab view where</font>
<font color= "green">    //          appropriate. On other devices, adapters render the</font>
<font color= "green">    //          TabbedPanel using a separate menu screen.</font>
<font color= "green">    //      ContentsPanel</font>
<font color= "green">    //          A specialized type of MultiPanel that can show either</font>
<font color= "green">    //          a summary view, where all child panes are shown</font>
<font color= "green">    //          simultaneously, or a details view that shows the</font>
<font color= "green">    //          active pane. Each child pane must implement the</font>
<font color= "green">    //          IContentsPane interface.</font>
<font color= "green">    //</font>
<font color= "green">    // Although these controls are fairly advanced compared to the</font>
<font color= "green">    // rest of the portal, full source code is provided.</font>
<font color= "green">    // </font>
<font color= "green">    //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue"></font>
<font color= "green">    //*********************************************************************</font>
<font color= "green">    //</font>
<font color= "green">    // IPanelPane interface</font>
<font color= "green">    //</font>
<font color= "green">    // The IPanelPane interface must be implemented by any control </font>
<font color= "green">    // that needs to be a child pane of a MultiPanel or derivative</font>
<font color= "green">    // control. The interface has the following members:</font>
<font color= "green">    //</font>
<font color= "green">    //      Title property</font>
<font color= "green">    //          Returns the title of the pane.</font>
<font color= "green">    //</font>
<font color= "green">    //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">    public </font>interface IPanelPane {
<font color= "blue">        </font>String Title { get; }
<font color= "blue">    </font>}
<font color= "blue">    </font>
<font color= "green">    //*********************************************************************</font>
<font color= "green">    //</font>
<font color= "green">    // IContentsPane interface</font>
<font color= "green">    //</font>
<font color= "green">    // The IContentsPane interface must be implemented by any control </font>
<font color= "green">    // that needs to be a child pane of a ContentsPanel control.</font>
<font color= "green">    // The interface has the following members:</font>
<font color= "green">    //</font>
<font color= "green">    //      Title property</font>
<font color= "green">    //          Returns the title of the pane.</font>
<font color= "green">    //      OnSetSummaryMode method</font>
<font color= "green">    //          Called when the ContentsPane control switches</font>
<font color= "green">    //          from summary view to item details view.</font>
<font color= "green">    //</font>
<font color= "green">    //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">    public </font>interface IContentsPane : IPanelPane {
<font color= "blue"></font>
<font color= "blue">        void</font> OnSetSummaryMode();
<font color= "blue">    </font>}
<font color= "blue">    </font>
<font color= "green">    //*********************************************************************</font>
<font color= "green">    //</font>
<font color= "green">    // ChildPanel Class</font>
<font color= "green">    //</font>
<font color= "green">    // The ChildPanel Class is a control that inherits from </font>
<font color= "green">    // System.Web.UI.MobileControls.Panel, and can be placed inside</font>
<font color= "green">    // a MultiPanel control. Even MultiPanel inherits from ChildPanel,</font>
<font color= "green">    // allowing nesting of MultiPanel controls.</font>
<font color= "green">    //</font>
<font color= "green">    //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">    public class</font> ChildPanel : Panel, IPanelPane, INamingContainer {
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // IPanelPane.Title Property</font>
<font color= "green">        //</font>
<font color= "green">        // Returns the title of the pane.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        </font>String IPanelPane.Title {
<font color= "blue">            get</font> {
<font color= "blue">                return</font> this.Title;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // ChildPanel.Title Property</font>
<font color= "green">        //</font>
<font color= "green">        // Returns the title of the pane.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        public </font>String Title {
<font color= "blue">            get</font> {
<font color= "green">                // Load the title from the ViewState property bag, </font>
<font color= "green">                // defaulting to an empty String.</font>
<font color= "blue">                </font>String s = (String)ViewState["Title"];
<font color= "blue">                return</font> s != null ? s : String.Empty;
<font color= "blue">            </font>}
<font color= "blue"></font>
<font color= "blue">            set</font> {
<font color= "green">                // Save the title to the ViewState property bag.</font>
<font color= "blue">                </font>ViewState["Title"] = value;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // ChildPanel.PaginateChildren Property</font>
<font color= "green">        //</font>
<font color= "green">        // The PaginateChildren property controls whether the form</font>
<font color= "green">        // can paginate children of the panel individually. Overriden</font>
<font color= "green">        // to allow contents to be paginated.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        protected </font>override bool PaginateChildren {
<font color= "blue">            get</font> {
<font color= "blue">                return</font> true;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue">    </font>}
<font color= "blue"></font>
<font color= "green">    //*********************************************************************</font>
<font color= "green">    //</font>
<font color= "green">    // MultiPanel Class</font>
<font color= "green">    //</font>
<font color= "green">    // The MultiPanel Class is a control that inherits from </font>
<font color= "green">    // ChildPanel, and can manage one or more child controls or "panes".</font>
<font color= "green">    //</font>
<font color= "green">    //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">    public class</font> MultiPanel : ChildPanel {
<font color= "green">        // Collection of panes.</font>
<font color= "blue">        private </font>PanelPaneCollection _panes;
<font color= "blue">    </font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // MultiPanel.Panes Property</font>
<font color= "green">        //</font>
<font color= "green">        // Returns the collection of child panes.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        public </font>PanelPaneCollection Panes {
<font color= "blue">            get</font> {
<font color= "green">                // If not yet created, create the collection.</font>
<font color= "blue"></font><font color= "blue">                if </font>(_panes == null) {<font color= "blue"></font>
<font color= "blue">                    </font>_panes = new PanelPaneCollection(this);
<font color= "blue">                </font>}
<font color= "blue">                return</font> _panes;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // MultiPanel.ActivePane Property</font>
<font color= "green">        //</font>
<font color= "green">        // Get or set the currently active child pane.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        public </font>IPanelPane ActivePane {
<font color= "blue">            get</font> {
<font color= "green">                // Get the index of the active pane, and use it to</font>
<font color= "green">                // look up the active pane.</font>
<font color= "blue">                </font>int index = ActivePaneIndex;
<font color= "blue">                return</font> (index != -1) ? Panes[index] : null;
<font color= "blue">            </font>}
<font color= "blue"></font>
<font color= "blue">            set</font> {
<font color= "green">                // Find the index of the given pane, and use it to</font>
<font color= "green">                // set the active pane index.</font>
<font color= "blue">                </font>int index = Panes.IndexOf(value);
<font color= "blue"></font><font color= "blue">                if </font>(index == -1) {<font color= "blue"></font>
<font color= "blue">                    </font>throw new Exception("Pane not in Panes collection");
<font color= "blue">                </font>}
<font color= "blue">                </font>ActivePaneIndex = index;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // MultiPanel.ActivePaneIndex Property</font>
<font color= "green">        //</font>
<font color= "green">        // Get or set the index of the currently active child pane.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        public </font>int ActivePaneIndex {
<font color= "blue">            get</font> {
<font color= "green">                // Get the index from the ViewState property bag, defaulting</font>
<font color= "green">                // to the first pane if not found.</font>
<font color= "blue">                </font>Object o = ViewState["ActivePaneIndex"];
<font color= "blue"></font><font color= "blue">                if </font>(o != null) {<font color= "blue"></font>
<font color= "blue">                    return</font> (int)o;
<font color= "blue">                </font>}
<font color= "blue"></font><font color= "blue">                else </font>{<font color= "blue"></font>
<font color= "blue">                    return</font> (Panes.Count > 0) ? 0 : -1;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue"></font>
<font color= "blue">            set</font> {
<font color= "green">                // Make sure index is within range.</font>
<font color= "blue"></font><font color= "blue">                if </font>(value < 0 || value >= Panes.Count) {<font color= "blue"></font>
<font color= "blue">                    </font>throw new Exception("Active pane index out of range");
<font color= "blue">                </font>}
<font color= "blue"></font>
<font color= "green">                // Set the index in the ViewState property bag.</font>
<font color= "blue">                </font>ViewState["ActivePaneIndex"] = value;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // MultiPanel.AddParsedSubObject Method</font>
<font color= "green">        //</font>
<font color= "green">        // AddParsedSubObject is called by the framework when a child</font>
<font color= "green">        // control is being added to the control from the persistence format.</font>
<font color= "green">        // AddParsedSubObject below checks if the added control is a </font>
<font color= "green">        // child pane, and automatically adds it to the Panes collection.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        protected </font>override void AddParsedSubObject(Object obj) {
<font color= "blue">            </font>IPanelPane pane = obj as IPanelPane;
<font color= "blue">        </font>
<font color= "green">            // Only allow panes as children.</font>
<font color= "blue"></font><font color= "blue">            if </font>(pane == null) {<font color= "blue"></font>
<font color= "blue">                </font>throw new Exception("A MultiPanel control can only contain panes.");
<font color= "blue">            </font>}
<font color= "blue"></font>
<font color= "green">            // Add the pane to the Panes collection.</font>
<font color= "blue">            </font>Panes.AddInternal(pane);
<font color= "blue">            </font>base.AddParsedSubObject(obj);
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // MultiPanel.OnRender Method</font>
<font color= "green">        //</font>
<font color= "green">        // OnRender is called by the framework to render the control.</font>
<font color= "green">        // By default, OnRender of a MultiPanel only renders the active </font>
<font color= "green">        // child pane. Specialized versions of the control, such as</font>
<font color= "green">        // TabbedPanel and ContentsPanel, have different behavior.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        protected </font>override void OnRender(HtmlTextWriter writer) {
<font color= "blue">            </font>((Control)ActivePane).RenderControl(writer);
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // MultiPanel.PaginateRecursive Method</font>
<font color= "green">        //</font>
<font color= "green">        // PaginateRecursive is called by the framework to recursively</font>
<font color= "green">        // paginate children. For MultiPanel controls, PaginateRecursive</font>
<font color= "green">        // only paginates the active child pane.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        public </font>override void PaginateRecursive(ControlPager pager) {
<font color= "blue">            </font>Control activePane = (Control)ActivePane;
<font color= "blue"></font>
<font color= "green">            // Active pane may not be a mobile control (e.g. it may be</font>
<font color= "green">            // a user control).</font>
<font color= "blue">            </font>MobileControl mobileCtl = activePane as MobileControl;
<font color= "blue"></font>
<font color= "blue"></font><font color= "blue">            if </font>(mobileCtl != null) {<font color= "blue"></font>
<font color= "green">                // Paginate the children.</font>
<font color= "blue">                </font>mobileCtl.PaginateRecursive(pager);
<font color= "blue"></font>
<font color= "green">                // Set own first and last page from results of child</font>
<font color= "green">                // pagination.</font>
<font color= "blue">                </font>this.FirstPage = mobileCtl.FirstPage;
<font color= "blue">                </font>this.LastPage = pager.PageCount;
<font color= "blue">            </font>}
<font color= "blue"></font><font color= "blue">            else </font>{<font color= "blue"></font>
<font color= "green">                // Call the DoPaginateChildren utility method to </font>
<font color= "green">                // paginate a non-mobile child.</font>
<font color= "blue">                </font>int firstAssignedPage = -1;
<font color= "blue">                </font>DoPaginateChildren(pager, activePane, ref firstAssignedPage);
<font color= "blue"></font>
<font color= "green">                // Set own first and last page from results of child</font>
<font color= "green">                // pagination.</font>
<font color= "blue"></font><font color= "blue">                if </font>(firstAssignedPage != -1) {<font color= "blue"></font>
<font color= "blue">                    </font>this.FirstPage = firstAssignedPage;
<font color= "blue">                </font>}
<font color= "blue"></font><font color= "blue">                else </font>{<font color= "blue"></font>
<font color= "blue">                    </font>this.FirstPage = pager.GetPage(100);
<font color= "blue">                </font>}
<font color= "blue">                </font>this.LastPage = pager.PageCount;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // MultiPanel.DoPaginateRecursive Static Method</font>
<font color= "green">        //</font>
<font color= "green">        // The DoPaginateRecursive method paginates non-mobile child</font>
<font color= "green">        // controls, looking for mobile controls inside them.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        private </font>static void DoPaginateChildren(ControlPager pager, Control ctl, ref int firstAssignedPage) {
<font color= "green">            // Search all children of the control.</font>
<font color= "blue"></font><font color= "blue">            if </font>(ctl.HasControls()) {<font color= "blue"></font>
<font color= "blue">                </font>foreach (Control child in ctl.Controls) {
<font color= "blue"></font><font color= "blue">                    if </font>(child.Visible) {<font color= "blue"></font>
<font color= "green">                        // Look for a visible mobile control.</font>
<font color= "blue">                        </font>MobileControl mobileCtl = child as MobileControl;
<font color= "blue"></font><font color= "blue">                        if </font>(mobileCtl != null) {<font color= "blue"></font>
<font color= "green">                            // Paginate the mobile control.</font>
<font color= "blue">                            </font>mobileCtl.PaginateRecursive(pager);
<font color= "blue"></font>
<font color= "green">                            // If this is the first control being paginated,</font>
<font color= "green">                            // set the first assigned page.</font>
<font color= "blue"></font><font color= "blue">                            if </font>(firstAssignedPage == -1) {<font color= "blue"></font>
<font color= "blue">                                </font>firstAssignedPage = mobileCtl.FirstPage;
<font color= "blue">                            </font>}
<font color= "blue">                        </font>}
<font color= "blue"></font><font color= "blue">                        else if </font>(child is UserControl) {<font color= "blue"></font>
<font color= "green">                            // Continue paginating user controls, which may contain</font>
<font color= "green">                            // their own mobile children.</font>
<font color= "blue">                            </font>DoPaginateChildren(pager, child, ref firstAssignedPage);
<font color= "blue">                        </font>}
<font color= "blue">                    </font>}
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "blue">    </font>}
<font color= "blue"></font>
<font color= "green">    //*********************************************************************</font>
<font color= "green">    //</font>
<font color= "green">    // PanelPaneCollection Class</font>
<font color= "green">    //</font>
<font color= "green">    // The PanelPaneCollection Class is used to keep a collection of</font>
<font color= "green">    // child panes of a MultiPanel control. The class implements </font>
<font color= "green">    // ICollection, so it can be used as a general collection.</font>
<font color= "green">    //</font>
<font color= "green">    //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">    public class</font> PanelPaneCollection : ICollection {
<font color= "green">        // Private instance variables.</font>
<font color= "blue">        private </font>MultiPanel _parent;
<font color= "blue">        private </font>ArrayList _items = new ArrayList();
<font color= "blue"></font>
<font color= "green">        // Can only be instantiated by MultiPanel.</font>
<font color= "blue">        </font>internal PanelPaneCollection(MultiPanel parent) {
<font color= "green">            // Save off reference to parent control.</font>
<font color= "blue">            </font>_parent = parent;
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // PanelPaneCollection.Add Method</font>
<font color= "green">        //</font>
<font color= "green">        // Adds a pane to the collection.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        public void</font> Add(IPanelPane pane) {
<font color= "green">            // Add the pane to the parent's child controls collection.</font>
<font color= "blue">            </font>_parent.Controls.Add((Control)pane);
<font color= "blue">            </font>_items.Add(pane);
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // PanelPaneCollection.AddInternal Method</font>
<font color= "green">        //</font>
<font color= "green">        // Adds a pane to the collection, but does not add it to the parent's</font>
<font color= "green">        // controls. This is called by the parent control itself to add </font>
<font color= "green">        // panes.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        </font>internal void AddInternal(IPanelPane pane) {
<font color= "blue">            </font>_items.Add(pane);
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // PanelPaneCollection.Remove Method</font>
<font color= "green">        //</font>
<font color= "green">        // Removes a pane from the collection.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        public void</font> Remove(IPanelPane pane) {
<font color= "green">            // Remove the pane from the parent's child controls collection.</font>
<font color= "blue">            </font>_parent.Controls.Remove((Control)pane);
<font color= "blue">            </font>_items.Remove(pane);
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // PanelPaneCollection.Clear Method</font>
<font color= "green">        //</font>
<font color= "green">        // Removes all panes from the collection.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        public void</font> Clear() {
<font color= "green">            // Remove all child controls from the parent.</font>
<font color= "blue">            </font>foreach (Control pane in _items) {
<font color= "blue">                </font>_parent.Controls.Remove(pane);
<font color= "blue">            </font>}
<font color= "blue">            </font>_items.Clear();
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // PanelPaneCollection.this[] Property</font>
<font color= "green">        //</font>
<font color= "green">        // Returns a pane by index.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        public </font>IPanelPane this[int index] {
<font color= "blue">            get</font> {
<font color= "blue">                return</font> (IPanelPane)_items[index];
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // PanelPaneCollection.Count Property</font>
<font color= "green">        //</font>
<font color= "green">        // Returns the number of panes in the collection.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        public </font>int Count {
<font color= "blue">            get</font> {
<font color= "blue">                return</font> _items.Count;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // PanelPaneCollection.IndexOf Method</font>
<font color= "green">        //</font>
<font color= "green">        // Returns the index of a given pane.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        public </font>int IndexOf(IPanelPane pane) {
<font color= "blue">            return</font> _items.IndexOf(pane);
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // PanelPaneCollection.IsReadOnly Property</font>
<font color= "green">        //</font>
<font color= "green">        // Returns whether the collection is read-only.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        public </font>bool IsReadOnly {
<font color= "blue">            get</font> {
<font color= "blue">                return</font> _items.IsReadOnly;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // PanelPaneCollection.IsSynchronized Property</font>
<font color= "green">        //</font>
<font color= "green">        // Returns whether the collection is synchronized.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        public </font>bool IsSynchronized {
<font color= "blue">            get</font> {
<font color= "blue">                return</font> false;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // PanelPaneCollection.SyncRoot Property</font>
<font color= "green">        //</font>
<font color= "green">        // Returns the collection's synchronization root.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        public </font>Object SyncRoot {
<font color= "blue">            get</font> {
<font color= "blue">                return</font> this;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // PanelPaneCollection.CopyTo Method</font>
<font color= "green">        //</font>
<font color= "green">        // Copies the contents of the collection to an array.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        public void</font> CopyTo(Array array, int index) {
<font color= "blue">            </font>foreach (Object item in _items) {
<font color= "blue">                </font>array.SetValue (item, index++);
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // PanelPaneCollection.GetEnumerator Method</font>
<font color= "green">        //</font>
<font color= "green">        // Returns an object capable of enumerating the collection.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        public </font>virtual IEnumerator GetEnumerator() {
<font color= "blue">            return</font> _items.GetEnumerator ();
<font color= "blue">        </font>}
<font color= "blue">    </font>}
<font color= "blue"></font>
<font color= "green">    //*********************************************************************</font>
<font color= "green">    //</font>
<font color= "green">    // TabbedPanel Class</font>
<font color= "green">    //</font>
<font color= "green">    // The TabbedPanel Class is a control that inherits from MultiPanel,</font>
<font color= "green">    // and provides the ability for the user to switch between panels.</font>
<font color= "green">    // The TabbedPanel also has adapters defined for custom rendering.</font>
<font color= "green">    //</font>
<font color= "green">    //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">    public class</font> TabbedPanel : MultiPanel, IPostBackEventHandler {
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // TabbedPanel.OnRender Method</font>
<font color= "green">        //</font>
<font color= "green">        // OnRender is called by the framework to render the control.</font>
<font color= "green">        // The TabbedPanel's OnRender method overrides the behavior</font>
<font color= "green">        // of MultiPanel, and directly calls the adapter to do rendering.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        protected </font>override void OnRender(HtmlTextWriter writer) {
<font color= "blue">            </font>Adapter.Render(writer);
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // TabbedPanel.TabColor Property</font>
<font color= "green">        //</font>
<font color= "green">        // Gets or sets the background color used for each tab label, when</font>
<font color= "green">        // tabbed rendering is used.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        public </font>Color TabColor {
<font color= "blue">            get</font> {
<font color= "green">                // Get the color from the ViewState property bag, defaulting</font>
<font color= "green">                // to an empty color.</font>
<font color= "blue">                </font>Object o = ViewState["TabColor"];
<font color= "blue">                return</font> o != null ? (Color)o : Color.Empty;
<font color= "blue">            </font>}
<font color= "blue"></font>
<font color= "blue">            set</font> {
<font color= "green">                // Save the color in the ViewState property bag.</font>
<font color= "blue">                </font>ViewState["TabColor"] = value;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // TabbedPanel.TabTextColor Property</font>
<font color= "green">        //</font>
<font color= "green">        // Gets or sets the text color used for each tab label, when</font>
<font color= "green">        // tabbed rendering is used.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        public </font>Color TabTextColor {
<font color= "blue">            get</font> {
<font color= "green">                // Get the color from the ViewState property bag, defaulting</font>
<font color= "green">                // to an empty color.</font>
<font color= "blue">                </font>Object o = ViewState["TabTextColor"];
<font color= "blue">                return</font> o != null ? (Color)o : Color.Empty;
<font color= "blue">            </font>}
<font color= "blue"></font>
<font color= "blue">            set</font> {
<font color= "green">                // Save the color in the ViewState property bag.</font>
<font color= "blue">                </font>ViewState["TabTextColor"] = value;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // TabbedPanel.ActiveTabColor Property</font>
<font color= "green">        //</font>
<font color= "green">        // Gets or sets the background color used for the active tab label, when</font>
<font color= "green">        // tabbed rendering is used.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        public </font>Color ActiveTabColor {
<font color= "blue">            get</font> {
<font color= "green">                // Get the color from the ViewState property bag, defaulting</font>
<font color= "green">                // to an empty color.</font>
<font color= "blue">                </font>Object o = ViewState["ActiveTabColor"];
<font color= "blue">                return</font> o != null ? (Color)o : Color.Empty;
<font color= "blue">            </font>}
<font color= "blue"></font>
<font color= "blue">            set</font> {
<font color= "green">                // Save the color in the ViewState property bag.</font>
<font color= "blue">                </font>ViewState["ActiveTabColor"] = value;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // TabbedPanel.ActiveTabTextColor Property</font>
<font color= "green">        //</font>
<font color= "green">        // Gets or sets the text color used for the active tab label, when</font>
<font color= "green">        // tabbed rendering is used.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        public </font>Color ActiveTabTextColor {
<font color= "blue">            get</font> {
<font color= "green">                // Get the color from the ViewState property bag, defaulting</font>
<font color= "green">                // to an empty color.</font>
<font color= "blue">                </font>Object o = ViewState["ActiveTabTextColor"];
<font color= "blue">                return</font> o != null ? (Color)o : Color.Empty;
<font color= "blue">            </font>}
<font color= "blue"></font>
<font color= "blue">            set</font> {
<font color= "green">                // Save the color in the ViewState property bag.</font>
<font color= "blue">                </font>ViewState["ActiveTabTextColor"] = value;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // TabbedPanel.TabsPerRow Property</font>
<font color= "green">        //</font>
<font color= "green">        // Gets or sets the number of tabs to be displayed per row, when</font>
<font color= "green">        // tabbed rendering is used.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        public </font>int TabsPerRow {
<font color= "blue">            get</font> {
<font color= "green">                // Get the value from the ViewState property bag, defaulting</font>
<font color= "green">                // to 4.</font>
<font color= "blue">                </font>Object o = ViewState["TabsPerRow"];
<font color= "blue">                return</font> o != null ? (int)o : 4;
<font color= "blue">            </font>}
<font color= "blue"></font>
<font color= "blue">            set</font> {
<font color= "green">                // Save the value in the ViewState property bag.</font>
<font color= "blue">                </font>ViewState["TabsPerRow"] = value;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // IPostBackEventHandler.RaisePostBackEvent Property</font>
<font color= "green">        //</font>
<font color= "green">        // RaisePostBackEvent is called by the framework when the control</font>
<font color= "green">        // is to receive a postback event. Responds to the event by </font>
<font color= "green">        // using the event information to switch to another active pane.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        public </font>virtual void RaisePostBackEvent(String eventArgument) {
<font color= "blue">            </font>EventArgs e = new EventArgs();
<font color= "blue"></font>
<font color= "green">            // Call Deactivate event handler.</font>
<font color= "blue">            </font>OnTabDeactivate(e);
<font color= "blue"></font>
<font color= "blue">            </font>ActivePaneIndex = Int32.Parse(eventArgument);
<font color= "blue"></font>
<font color= "green">            // Call Activate event handler.</font>
<font color= "blue">            </font>OnTabActivate(e);
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        // Public events.</font>
<font color= "blue">        public </font>event EventHandler TabActivate;
<font color= "blue">        public </font>event EventHandler TabDeactivate;
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // IPostBackEventHandler.OnTabActivate Method</font>
<font color= "green">        //</font>
<font color= "green">        // OnTabActivate is called when a child pane is newly activated</font>
<font color= "green">        // as a result of user interaction, and raises the TabActivate event.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        protected </font>virtual void OnTabActivate(EventArgs e) {
<font color= "blue"></font><font color= "blue">            if </font>(TabActivate != null) {<font color= "blue"></font>
<font color= "blue">                </font>TabActivate(this, e);
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // IPostBackEventHandler.OnTabDeactivate Method</font>
<font color= "green">        //</font>
<font color= "green">        // OnTabDeactivate is called when a child pane is deactivated</font>
<font color= "green">        // as a result of user interaction, and raises the TabDeactivate event.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        protected </font>virtual void OnTabDeactivate(EventArgs e) {
<font color= "blue"></font><font color= "blue">            if </font>(TabDeactivate != null) {<font color= "blue"></font>
<font color= "blue">                </font>TabDeactivate(this, e);
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue">    </font>}
<font color= "blue"></font>
<font color= "green">    //*********************************************************************</font>
<font color= "green">    //</font>
<font color= "green">    // ContentsPanel Class</font>
<font color= "green">    //</font>
<font color= "green">    // The ContentsPanel Class is a control that inherits from MultiPanel,</font>
<font color= "green">    // and can render child panes in one of two views. In Summary View,</font>
<font color= "green">    // the control renders each of its child panes (which, in turn, would</font>
<font color= "green">    // probably show only summarized views of themselves) In Details View</font>
<font color= "green">    // the control only renders the active pane.</font>
<font color= "green">    //</font>
<font color= "green">    //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">    public class</font> ContentsPanel : MultiPanel {
<font color= "green">        // Constants for command names that can be used for</font>
<font color= "green">        // event bubbling in custom UI.</font>
<font color= "blue">        public </font>static readonly String DetailsCommand = "details";
<font color= "blue">        public </font>static readonly String SummaryCommand = "summary";
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // ContentsPanel.SummaryView Property</font>
<font color= "green">        //</font>
<font color= "green">        // Get or set the view of the panel to either Summary (true) </font>
<font color= "green">        // or Details (false) view.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        public </font>bool SummaryView {
<font color= "blue">            get</font> {
<font color= "green">                // Get the setting from the ViewState property bag, defaulting</font>
<font color= "green">                // to true.</font>
<font color= "blue">                </font>Object o = ViewState["SummaryView"];
<font color= "blue">                return</font> (o != null) ? (bool)o : true;
<font color= "blue">            </font>}
<font color= "blue"></font>
<font color= "blue">            set</font> {
<font color= "green">                // Save the setting in the ViewState property bag.</font>
<font color= "blue">                </font>ViewState["SummaryView"] = value;
<font color= "blue"></font>
<font color= "green">                // Notify each child pane of the switched mode.</font>
<font color= "blue">                </font>foreach (IContentsPane pane in Panes) {
<font color= "blue">                    </font>pane.OnSetSummaryMode();
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // ContentsPanel.Render Method</font>
<font color= "green">        //</font>
<font color= "green">        // Called by the framework to render the control. The behavior differs</font>
<font color= "green">        // depending on whether Summary or Details view is showing.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        protected </font>override void Render(HtmlTextWriter writer) {
<font color= "blue"></font><font color= "blue">            if </font>(SummaryView) {<font color= "blue"></font>
<font color= "green">                // Render all panes in Summary view.</font>
<font color= "blue">                </font>RenderChildren(writer);
<font color= "blue">            </font>}
<font color= "blue"></font><font color= "blue">            else </font>{<font color= "blue"></font>
<font color= "green">                // Render only the active pane in Details view.</font>
<font color= "blue">                </font>((Control)ActivePane).RenderControl(writer);
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // ContentsPanel.OnBubbleEvent Method</font>
<font color= "green">        //</font>
<font color= "green">        // Called by the framework when postback events are bubbled up </font>
<font color= "green">        // from a child control. If the event source uses the special</font>
<font color= "green">        // command names listed above, this method automatically responds</font>
<font color= "green">        // to the event to change modes. This allows the developer to </font>
<font color= "green">        // provide UI for showing item details by simply placing a </font>
<font color= "green">        // control with the appropriate command name in a child pane.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        protected </font>override bool OnBubbleEvent(Object sender, EventArgs e) {
<font color= "blue">            </font>bool handled = false;
<font color= "blue">            </font>System.Web.UI.WebControls.CommandEventArgs commandArgs = e as System.Web.UI.WebControls.CommandEventArgs;
<font color= "blue"></font><font color= "blue">            if </font>(commandArgs != null && commandArgs.CommandName != null) {<font color= "blue"></font>
<font color= "blue">                </font>String commandName = commandArgs.CommandName.ToLower();
<font color= "blue"></font>
<font color= "green">                // Look for recognized command names.</font>
<font color= "blue"></font>
<font color= "blue"></font><font color= "blue">                if </font>(commandName == DetailsCommand) {<font color= "blue"></font>
<font color= "green">                    // To show details, first find the child pane in which the</font>
<font color= "green">                    // event source is located.</font>
<font color= "blue">                    </font>Control ctl = (Control)sender;
<font color= "blue">                    while</font> (ctl != null && ctl != this) {
<font color= "blue">                        </font>IPanelPane pane = ctl as IPanelPane;
<font color= "blue"></font><font color= "blue">                        if </font>(pane != null) {<font color= "blue"></font>
<font color= "green">                            // Make the pane active, and switch into Details view.</font>
<font color= "blue">                            </font>ActivePane = pane;
<font color= "blue">                            </font>SummaryView = false;
<font color= "blue">                            </font>handled = true;
<font color= "blue">                            </font>break;
<font color= "blue">                        </font>}
<font color= "blue">                        </font>ctl = ctl.Parent;
<font color= "blue">                    </font>}
<font color= "blue">                </font>}
<font color= "blue"></font><font color= "blue">                else if </font>(commandName == SummaryCommand) {<font color= "blue"></font>
<font color= "green">                    // Switch into Summary view.</font>
<font color= "blue">                    </font>SummaryView = true;
<font color= "blue">                    </font>handled = true;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue">            return</font> handled;
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // ContentsPanel.ShowDetails Method</font>
<font color= "green">        //</font>
<font color= "green">        // The ShowDetails method switches the control into Details view,</font>
<font color= "green">        // and makes the specified child pane active. Child panes can</font>
<font color= "green">        // call this method to activate themselves.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        public void</font> ShowDetails(IPanelPane pane) {
<font color= "blue">            </font>SummaryView = false;
<font color= "blue">            </font>ActivePane = pane;
<font color= "blue">        </font>}
<font color= "blue">    </font>}
<font color= "blue"></font>
<font color= "green">    //*********************************************************************</font>
<font color= "green">    //</font>
<font color= "green">    // HtmlTabbedPanelAdapter Class</font>
<font color= "green">    //</font>
<font color= "green">    // The HtmlTabbedPanelAdapter provides rendering for the TabbedPanel</font>
<font color= "green">    // class on devices that support HTML and JScript.</font>
<font color= "green">    //</font>
<font color= "green">    //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">    public class</font> HtmlTabbedPanelAdapter : HtmlControlAdapter {
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // HtmlTabbedPanelAdapter.Control Property</font>
<font color= "green">        //</font>
<font color= "green">        // Returns the attached control, strongly typed as a TabbedPanel.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        protected </font>new TabbedPanel Control {
<font color= "blue">            get</font> {
<font color= "blue">                return</font> (TabbedPanel)base.Control;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // HtmlTabbedPanelAdapter.Render Method</font>
<font color= "green">        //</font>
<font color= "green">        // Renders the control. The TabbedPanel is rendered as one or more</font>
<font color= "green">        // rows of tabs that the user can click on to move between tabs.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        public </font>override void Render(HtmlMobileTextWriter writer) {
<font color= "blue">            </font>IPanelPane activePane = Control.ActivePane;
<font color= "blue">            </font>int tabsPerRow = Control.TabsPerRow;
<font color= "blue">            </font>PanelPaneCollection panes = Control.Panes;
<font color= "blue">            </font>int paneCount = panes.Count;
<font color= "blue"></font>
<font color= "green">            // Figure out the number of visible panes.</font>
<font color= "blue">            </font>int[] visiblePanes = new int[paneCount];
<font color= "blue">            </font>int visiblePaneCount = 0;
<font color= "blue">            for</font> (int i = 0; i < paneCount; i++) {
<font color= "blue"></font><font color= "blue">                if </font>(((Control)panes[i]).Visible) {<font color= "blue"></font>
<font color= "blue">                    </font>visiblePanes[visiblePaneCount++] = i;
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue"></font>
<font color= "green">            // Calculate how many rows are necessary.</font>
<font color= "blue">            </font>int rows = (visiblePaneCount + tabsPerRow - 1) / tabsPerRow;
<font color= "blue"></font>
<font color= "green">            // make sure tabsPerRow doesn't exceed the number of visible panes</font>
<font color= "blue">            </font>tabsPerRow = (Control.TabsPerRow >  visiblePaneCount) ? visiblePaneCount : Control.TabsPerRow;
<font color= "blue"></font>
<font color= "green">            // Open the table.</font>
<font color= "blue">            </font>writer.WriteBeginTag("table");
<font color= "blue">            </font>writer.WriteAttribute("cellspacing", "0");
<font color= "blue">            </font>writer.WriteAttribute("cellpadding", "2");
<font color= "blue">            </font>writer.WriteAttribute("border", "0");
<font color= "blue">            </font>writer.WriteLine(">");
<font color= "blue"></font>
<font color= "blue">            for</font> (int row = rows - 1; row >= 0; row--) {
<font color= "blue">                </font>writer.WriteFullBeginTag("tr");
<font color= "blue">                </font>writer.WriteLine();
<font color= "blue">                for</font> (int col = 0; col < tabsPerRow; col++) {
<font color= "blue">                    </font>writer.WriteBeginTag("td");
<font color= "blue">                    </font>writer.WriteAttribute("width", "0");
<font color= "blue">                    </font>writer.Write(">");
<font color= "blue">                    </font>writer.WriteEndTag("td");
<font color= "blue"></font>
<font color= "blue">                    </font>int i = row * tabsPerRow + col;
<font color= "blue"></font><font color= "blue">                    if </font>(row > 0 && i >= visiblePaneCount) {<font color= "blue"></font>
<font color= "blue">                        </font>writer.WriteFullBeginTag("td");
<font color= "blue">                        </font>writer.WriteEndTag("td");
<font color= "blue">                        </font>continue;
<font color= "blue">                    </font>}
<font color= "blue"></font>
<font color= "blue">                    </font>int index = visiblePanes[i];
<font color= "blue">                    </font>IPanelPane child = panes[index];
<font color= "blue"></font><font color= "blue">                    if </font>(child == activePane) {<font color= "blue"></font>
<font color= "blue">                        </font>writer.WriteBeginTag("td");
<font color= "blue">                        </font>writer.WriteAttribute("bgcolor", GetColorString(Control.ActiveTabColor, "#333333"));
<font color= "blue">                        </font>writer.Write(">");
<font color= "blue"></font>
<font color= "blue">                        </font>writer.WriteBeginTag("font");
<font color= "blue">                        </font>writer.WriteAttribute("face", "Verdana");
<font color= "blue">                        </font>writer.WriteAttribute("size", "-2");
<font color= "blue">                        </font>writer.WriteAttribute("color", GetColorString(Control.ActiveTabTextColor, "#000000"));
<font color= "blue">                        </font>writer.Write(">");
<font color= "blue"></font>
<font color= "blue">                        </font>writer.WriteFullBeginTag("b");
<font color= "blue">                        </font>writer.Write("&nbsp;");
<font color= "blue">                        </font>writer.WriteText(child.Title, true);
<font color= "blue">                        </font>writer.Write("&nbsp;");
<font color= "blue">                        </font>writer.WriteEndTag("b");
<font color= "blue"></font>
<font color= "blue">                        </font>writer.WriteEndTag("font");
<font color= "blue"></font>
<font color= "blue">                        </font>writer.WriteEndTag("td");
<font color= "blue">                        </font>writer.WriteLine();
<font color= "blue">                    </font>}
<font color= "blue"></font><font color= "blue">                    else </font>{<font color= "blue"></font>
<font color= "blue">                        </font>writer.WriteBeginTag("td");
<font color= "blue">                        </font>writer.WriteAttribute("bgcolor", GetColorString(Control.TabColor, "#cccccc"));
<font color= "blue">                        </font>writer.Write(">");
<font color= "blue"></font>
<font color= "blue">                        </font>writer.WriteBeginTag("font");
<font color= "blue">                        </font>writer.WriteAttribute("face", "Verdana");
<font color= "blue">                        </font>writer.WriteAttribute("size", "-2");
<font color= "blue">                        </font>writer.WriteAttribute("color", GetColorString(Control.TabTextColor, "#000000"));
<font color= "blue">                        </font>writer.Write(">");
<font color= "blue"></font>
<font color= "blue">                        </font>writer.Write("&nbsp;");
<font color= "blue">                        </font>writer.WriteBeginTag("a");
<font color= "blue">                        </font>RenderPostBackEventAsAttribute(writer, "href", index.ToString());
<font color= "blue">                        </font>writer.Write(">");
<font color= "blue">                        </font>writer.WriteText(child.Title, true);
<font color= "blue">                        </font>writer.WriteEndTag("a");
<font color= "blue">                        </font>writer.Write("&nbsp;");
<font color= "blue"></font>
<font color= "blue">                        </font>writer.WriteEndTag("font");
<font color= "blue"></font>
<font color= "blue">                        </font>writer.WriteEndTag("td");
<font color= "blue">                        </font>writer.WriteLine();
<font color= "blue">                    </font>}
<font color= "blue">                </font>}
<font color= "blue">                </font>writer.WriteEndTag("tr");
<font color= "blue">                </font>writer.WriteLine();
<font color= "blue"></font>
<font color= "blue"></font><font color= "blue">                if </font>(row > 0) {<font color= "blue"></font>
<font color= "blue">                    </font>writer.WriteFullBeginTag("tr");
<font color= "blue">                    </font>writer.WriteBeginTag("td");
<font color= "blue">                    </font>writer.WriteAttribute("height", "1");
<font color= "blue">                    </font>writer.Write(">");
<font color= "blue">                    </font>writer.WriteEndTag("td");
<font color= "blue">                    </font>writer.WriteEndTag("tr");
<font color= "blue">                    </font>writer.WriteLine();
<font color= "blue">                </font>}
<font color= "blue">            </font>}
<font color= "blue"></font>
<font color= "blue">            </font>writer.WriteEndTag("table");
<font color= "blue">            </font>writer.WriteLine();
<font color= "blue"></font>
<font color= "blue">            </font>writer.WriteBeginTag("table");
<font color= "blue">            </font>writer.WriteAttribute("width", "100%");
<font color= "blue">            </font>writer.WriteAttribute("height", "2");
<font color= "blue">            </font>writer.WriteAttribute("border", "0");
<font color= "blue">            </font>writer.WriteAttribute("cellspacing", "0");
<font color= "blue">            </font>writer.WriteAttribute("bgcolor", "#000000");
<font color= "blue">            </font>writer.Write(">");
<font color= "blue">            </font>writer.WriteFullBeginTag("tr");
<font color= "blue">            </font>writer.WriteFullBeginTag("td");
<font color= "blue">            </font>writer.WriteEndTag("td");
<font color= "blue">            </font>writer.WriteEndTag("tr");
<font color= "blue">            </font>writer.WriteEndTag("table");
<font color= "blue">            </font>writer.WriteBreak();
<font color= "blue">        </font>
<font color= "blue">            </font>((Control)activePane).RenderControl(writer);
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "blue">        private </font>static String GetColorString(Color color, String defaultColor) {
<font color= "blue">            return</font> color != Color.Empty ? ColorTranslator.ToHtml(color) : defaultColor;
<font color= "blue">        </font>}
<font color= "blue">    </font>}
<font color= "blue"></font>
<font color= "blue">    public class</font> WmlTabbedPanelAdapter : WmlControlAdapter {
<font color= "blue">        private </font>List _menu;
<font color= "blue"></font>
<font color= "blue">        protected </font>new TabbedPanel Control {
<font color= "blue">            get</font> {
<font color= "blue">                return</font> (TabbedPanel)base.Control;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "blue">        public </font>override void OnInit(EventArgs e) {
<font color= "blue">            </font>_menu = new List();
<font color= "blue">            </font>_menu.ItemCommand += new ListCommandEventHandler(OnListItemCommand);
<font color= "blue">            </font>Control.Controls.AddAt(0, _menu);
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "blue">        public </font>override void OnLoad(EventArgs e) {
<font color= "blue">            </font>_menu.Items.Clear();
<font color= "blue">            </font>int index = 0;
<font color= "blue">            </font>foreach (IPanelPane child in Control.Panes) {
<font color= "blue"></font><font color= "blue">                if </font>(((Control)child).Visible) {<font color= "blue"></font>
<font color= "blue">                    </font>_menu.Items.Add(new MobileListItem(child.Title, index.ToString()));
<font color= "blue">                </font>}
<font color= "blue">                </font>index++;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "blue">        public </font>override void Render(WmlMobileTextWriter writer) {
<font color= "blue">            </font>Style st = new Style();
<font color= "blue">            </font>st.Wrapping = (Wrapping)Style[Style.WrappingKey, true];
<font color= "blue">            </font>st.Alignment = (Alignment)Style[Style.AlignmentKey, true];
<font color= "blue">            </font>writer.EnterLayout(st);
<font color= "blue"></font><font color= "blue">            if </font>(_menu.Visible) {<font color= "blue"></font>
<font color= "blue">                </font>_menu.RenderControl(writer);
<font color= "blue">            </font>}
<font color= "blue"></font><font color= "blue">            else </font>{<font color= "blue"></font>
<font color= "blue">                </font>((Control)Control.ActivePane).RenderControl(writer);
<font color= "blue">            </font>}
<font color= "blue"></font>
<font color= "blue">            </font>writer.ExitLayout(st);
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "blue">        private void</font> OnListItemCommand(Object sender, ListCommandEventArgs e) {
<font color= "blue">            </font>_menu.Visible = false;
<font color= "blue">            </font>Control.RaisePostBackEvent(e.ListItem.Value);
<font color= "blue">        </font>}
<font color= "blue">    </font>}
<font color= "blue"></font>
<font color= "blue">    public class</font> ChtmlTabbedPanelAdapter : HtmlControlAdapter {
<font color= "blue">        protected </font>new TabbedPanel Control {
<font color= "blue">            get</font> {
<font color= "blue">                return</font> (TabbedPanel)base.Control;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "blue">        public </font>override void Render(HtmlMobileTextWriter writer) {
<font color= "blue">            </font>writer.EnterStyle(Style);
<font color= "blue"></font>
<font color= "blue">            </font>IPanelPane activePane = Control.ActivePane;
<font color= "blue">            </font>writer.Write("[ ");
<font color= "blue">            </font>int index = 0;
<font color= "blue">            </font>foreach (IPanelPane child in Control.Controls) {
<font color= "blue"></font><font color= "blue">                if </font>(!((Control)child).Visible) {<font color= "blue"></font>
<font color= "blue">                    </font>index++;
<font color= "blue">                    </font>continue;
<font color= "blue">                </font>}
<font color= "blue"></font><font color= "blue">                if </font>(index > 0) {<font color= "blue"></font>
<font color= "blue">                    </font>writer.Write(" | ");
<font color= "blue">                </font>}
<font color= "blue"></font>
<font color= "blue"></font><font color= "blue">                if </font>(child == activePane) {<font color= "blue"></font>
<font color= "blue">                    </font>writer.Write("<b>");
<font color= "blue">                    </font>writer.WriteText(child.Title, true);
<font color= "blue">                    </font>writer.Write("</b>");
<font color= "blue">                </font>}
<font color= "blue"></font><font color= "blue">                else </font>{<font color= "blue"></font>
<font color= "blue">                    </font>writer.WriteBeginTag("a");
<font color= "blue">                    </font>RenderPostBackEventAsAttribute(writer, "href", index.ToString());
<font color= "blue">                    </font>writer.Write(">");
<font color= "blue">                    </font>writer.WriteText(child.Title, true);
<font color= "blue">                    </font>writer.WriteEndTag("a");
<font color= "blue">                </font>}
<font color= "blue"></font>
<font color= "blue">                </font>index++;
<font color= "blue">            </font>}
<font color= "blue">            </font>writer.Write(" ]");
<font color= "blue">            </font>writer.WriteBreak();
<font color= "blue">            </font>((Control)activePane).RenderControl(writer);
<font color= "blue">        </font>
<font color= "blue">            </font>writer.ExitStyle(Style);
<font color= "blue">        </font>}
<font color= "blue">    </font>}
<font color= "blue"></font>}
<font color= "blue"></font>
</pre>