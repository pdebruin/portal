<html><head><link rel=stylesheet href=style.css></head><body><div class=SourcePanel style='font-size:12'><pre style='background-color:white'>
<font color= "blue">using</font> System;
<font color= "blue">using</font> System.Collections;
<font color= "blue">using</font> System.ComponentModel;
<font color= "blue">using</font> System.Web;
<font color= "blue">using</font> System.Security;
<font color= "blue">using</font> System.Security.Principal;
<font color= "blue">using</font> System.Web.Security;
<font color= "blue">using</font> System.Data.SqlClient;
<font color= "blue">using</font> System.Threading;
<font color= "blue">using</font> System.Globalization;
<font color= "blue"></font>
<font color= "blue">namespace</font> ASPNET.StarterKit.Portal {
<font color= "blue"></font>
<font color= "blue">    public class</font> Global : System.Web.HttpApplication {
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // Application_BeginRequest Event</font>
<font color= "green">        //</font>
<font color= "green">        // The Application_BeginRequest method is an ASP.NET event that executes </font>
<font color= "green">        // on each web request into the portal application.  The below method</font>
<font color= "green">        // obtains the current tabIndex and TabId from the querystring of the </font>
<font color= "green">        // request -- and then obtains the configuration necessary to process</font>
<font color= "green">        // and render the request.</font>
<font color= "green">        //</font>
<font color= "green">        // This portal configuration is stored within the application's "Context"</font>
<font color= "green">        // object -- which is available to all pages, controls and components</font>
<font color= "green">        // during the processing of a single request.</font>
<font color= "green">        // </font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        protected void</font> Application_BeginRequest(Object sender, EventArgs e) {
<font color= "blue">                </font>
<font color= "blue">            </font>int tabIndex = 0;
<font color= "blue">            </font>int tabId = 1;
<font color= "blue">        </font>
<font color= "green">            // Get TabIndex from querystring</font>
<font color= "blue">        </font>
<font color= "blue"></font><font color= "blue">            if </font>(Request.Params["tabindex"] != null) {               <font color= "blue"></font>
<font color= "blue">                </font>tabIndex = Int32.Parse(Request.Params["tabindex"]);
<font color= "blue">            </font>}
<font color= "blue">                        </font>
<font color= "green">            // Get TabID from querystring</font>
<font color= "blue">        </font>
<font color= "blue"></font><font color= "blue">            if </font>(Request.Params["tabid"] != null) {              <font color= "blue"></font>
<font color= "blue">                </font>tabId = Int32.Parse(Request.Params["tabid"]);
<font color= "blue">            </font>}
<font color= "blue"></font>
<font color= "green">            // Build and add the PortalSettings object to the current Context</font>
<font color= "blue">            </font>Context.Items.Add("PortalSettings", new PortalSettings(tabIndex, tabId));
<font color= "blue">            </font>
<font color= "green">            // Retrieve and add the SiteConfiguration DataSet to the current Context</font>
<font color= "blue">            </font>HttpContext.Current.Items.Add("SiteSettings", Configuration.GetSiteSettings());
<font color= "blue"></font>
<font color= "blue"></font><font color= "blue">            if </font>(Request.UserLanguages != null)<font color= "blue"></font>
<font color= "blue">            </font>{
<font color= "blue">                </font>Thread.CurrentThread.CurrentCulture =  System.Globalization.CultureInfo.CreateSpecificCulture(Request.UserLanguages[0]);
<font color= "blue">                </font>Thread.CurrentThread.CurrentUICulture = Thread.CurrentThread.CurrentCulture;
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue">                          </font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // Application_AuthenticateRequest Event</font>
<font color= "green">        //</font>
<font color= "green">        // If the client is authenticated with the application, then determine</font>
<font color= "green">        // which security roles he/she belongs to and replace the "User" intrinsic</font>
<font color= "green">        // with a custom IPrincipal security object that permits "User.IsInRole"</font>
<font color= "green">        // role checks within the application</font>
<font color= "green">        //</font>
<font color= "green">        // Roles are cached in the browser in an in-memory encrypted cookie.  If the</font>
<font color= "green">        // cookie doesn't exist yet for this session, create it.</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue"></font>
<font color= "blue">        protected void</font> Application_AuthenticateRequest(Object sender, EventArgs e) {
<font color= "blue"></font>
<font color= "blue"></font><font color= "blue">            if </font>(Request.IsAuthenticated == true) {<font color= "blue"></font>
<font color= "blue"></font>
<font color= "blue">                </font>String[] roles;
<font color= "blue"></font>
<font color= "green">                // Create the roles cookie if it doesn't exist yet for this session.</font>
<font color= "blue"></font><font color= "blue">                if </font>((Request.Cookies["portalroles"] == null) || (Request.Cookies["portalroles"].Value == "")) {<font color= "blue"></font>
<font color= "blue"></font>
<font color= "green">                    // Get roles from UserRoles table, and add to cookie</font>
<font color= "blue">                    </font>UsersDB user = new UsersDB();
<font color= "blue">                    </font>roles = user.GetRoles(User.Identity.Name);
<font color= "blue">                </font>
<font color= "green">                    // Create a string to persist the roles</font>
<font color= "blue">                    </font>String roleStr = "";
<font color= "blue">                    </font>foreach (String role in roles) {
<font color= "blue">                        </font>roleStr += role;
<font color= "blue">                        </font>roleStr += ";";
<font color= "blue">                    </font>}
<font color= "blue"></font>
<font color= "green">                    // Create a cookie authentication ticket.</font>
<font color= "blue">                    </font>FormsAuthenticationTicket ticket = new FormsAuthenticationTicket(
<font color= "blue">                        </font>1,                              // version
<font color= "blue">                        </font>Context.User.Identity.Name,     // user name
<font color= "blue">                        </font>DateTime.Now,                   // issue time
<font color= "blue">                        </font>DateTime.Now.AddHours(1),       // expires every hour
<font color= "blue">                        </font>false,                          // don't persist cookie
<font color= "blue">                        </font>roleStr                         // roles
<font color= "blue">                        </font>);
<font color= "blue"></font>
<font color= "green">                    // Encrypt the ticket</font>
<font color= "blue">                    </font>String cookieStr = FormsAuthentication.Encrypt(ticket);
<font color= "blue"></font>
<font color= "green">                    // Send the cookie to the client</font>
<font color= "blue">                    </font>Response.Cookies["portalroles"].Value = cookieStr;
<font color= "blue">                    </font>Response.Cookies["portalroles"].Path = "/";
<font color= "blue">                    </font>Response.Cookies["portalroles"].Expires = DateTime.Now.AddMinutes(1);
<font color= "blue">                </font>}
<font color= "blue"></font><font color= "blue">                else </font>{<font color= "blue"></font>
<font color= "blue"></font>
<font color= "green">                    // Get roles from roles cookie</font>
<font color= "blue">                    </font>FormsAuthenticationTicket ticket = FormsAuthentication.Decrypt(Context.Request.Cookies["portalroles"].Value);
<font color= "blue"></font>
<font color= "green">                    //convert the string representation of the role data into a string array</font>
<font color= "blue">                    </font>ArrayList userRoles = new ArrayList();
<font color= "blue"></font>
<font color= "blue">                    </font>foreach (String role in ticket.UserData.Split( new char[] {';'} )) {
<font color= "blue">                        </font>userRoles.Add(role);
<font color= "blue">                    </font>}
<font color= "blue"></font>
<font color= "blue">                    </font>roles = (String[]) userRoles.ToArray(typeof(String));
<font color= "blue">                </font>}
<font color= "blue"></font>
<font color= "green">                // Add our own custom principal to the request containing the roles in the auth ticket</font>
<font color= "blue">                </font>Context.User = new GenericPrincipal(Context.User.Identity, roles);
<font color= "blue">                </font>
<font color= "blue">            </font>}
<font color= "blue">        </font>}
<font color= "blue"></font>
<font color= "green">        //*********************************************************************</font>
<font color= "green">        //</font>
<font color= "green">        // GetApplicationPath Method</font>
<font color= "green">        //</font>
<font color= "green">        // This method returns the correct relative path when installing</font>
<font color= "green">        // the portal on a root web site instead of virtual directory</font>
<font color= "green">        //</font>
<font color= "green">        //*********************************************************************</font>
<font color= "blue">        public </font>static string GetApplicationPath(HttpRequest request) 
<font color= "blue">        </font>{
<font color= "blue">            </font>string path = string.Empty;
<font color= "blue">            try</font> 
<font color= "blue">            </font>{
<font color= "blue"></font><font color= "blue">                if</font>(request.ApplicationPath != "/")<font color= "blue"></font>
<font color= "blue">                    </font>path = request.ApplicationPath;
<font color= "blue">            </font>}
<font color= "blue">            catch</font> (Exception e)
<font color= "blue">            </font>{
<font color= "blue">                </font>throw e;
<font color= "blue">            </font>}
<font color= "blue"></font>
<font color= "blue">            return</font> path;
<font color= "blue">        </font>}
<font color= "blue">    </font>}
<font color= "blue"></font>}
<font color= "blue"></font>
<font color= "blue"></font>
</pre>